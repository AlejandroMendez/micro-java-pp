
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 05 04:16:36 CET 2012
//----------------------------------------------------

package org.microjava.syntax;

import java_cup.runtime.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.factory.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.etf.pp1.symboltable.visitors.*;
import rs.etf.pp1.symboltable.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 05 04:16:36 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\010\000\002\002\004\000\002\067" +
    "\003\000\002\060\003\000\002\024\004\000\002\024\002" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\004\000\002\003\010\000\002\073\003\000\002" +
    "\074\003\000\002\026\003\000\002\026\003\000\002\061" +
    "\003\000\002\061\004\000\002\077\002\000\002\004\006" +
    "\000\002\027\005\000\002\027\003\000\002\030\003\000" +
    "\002\030\005\000\002\005\010\000\002\005\004\000\002" +
    "\071\003\000\002\057\003\000\002\023\004\000\002\023" +
    "\002\000\002\031\004\000\002\031\002\000\002\033\005" +
    "\000\002\033\002\000\002\070\004\000\002\070\004\000" +
    "\002\034\003\000\002\034\002\000\002\075\003\000\002" +
    "\006\012\000\002\032\004\000\002\032\002\000\002\007" +
    "\005\000\002\007\003\000\002\035\004\000\002\035\006" +
    "\000\002\037\003\000\002\037\002\000\002\062\006\000" +
    "\002\062\004\000\002\065\005\000\002\065\004\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\040" +
    "\004\000\002\040\002\000\002\041\003\000\002\041\002" +
    "\000\002\010\003\000\002\010\005\000\002\010\006\000" +
    "\002\010\005\000\002\010\004\000\002\010\005\000\002" +
    "\010\007\000\002\010\010\000\002\010\003\000\002\063" +
    "\005\000\002\063\004\000\002\042\004\000\002\042\002" +
    "\000\002\011\004\000\002\044\004\000\002\043\004\000" +
    "\002\043\002\000\002\046\005\000\002\046\002\000\002" +
    "\064\005\000\002\064\004\000\002\012\004\000\002\045" +
    "\004\000\002\047\004\000\002\047\002\000\002\013\004" +
    "\000\002\014\005\000\002\050\003\000\002\050\002\000" +
    "\002\051\005\000\002\051\002\000\002\015\005\000\002" +
    "\052\005\000\002\052\002\000\002\016\004\000\002\053" +
    "\005\000\002\053\002\000\002\054\003\000\002\054\002" +
    "\000\002\066\005\000\002\066\004\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\005\000\002" +
    "\017\007\000\002\017\005\000\002\055\004\000\002\055" +
    "\005\000\002\056\004\000\002\056\002\000\002\072\003" +
    "\000\002\072\006\000\002\072\007\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\033\005\001\002\000\004\002\320\001" +
    "\002\000\004\053\007\001\002\000\014\003\ufffc\025\ufffc" +
    "\033\ufffc\034\ufffc\053\ufffc\001\002\000\014\003\uffff\025" +
    "\uffff\033\uffff\034\uffff\053\uffff\001\002\000\014\003\016" +
    "\025\012\033\023\034\020\053\013\001\002\000\014\003" +
    "\ufff9\025\ufff9\033\ufff9\034\ufff9\053\ufff9\001\002\000\010" +
    "\026\ufffe\035\ufffe\053\ufffe\001\002\000\004\053\ufff5\001" +
    "\002\000\014\003\ufffb\025\ufffb\033\ufffb\034\ufffb\053\ufffb" +
    "\001\002\000\010\026\uffe3\035\uffe3\053\uffe3\001\002\000" +
    "\006\012\314\026\315\001\002\000\004\053\ufff0\001\002" +
    "\000\004\053\045\001\002\000\014\003\ufffa\025\ufffa\033" +
    "\ufffa\034\ufffa\053\ufffa\001\002\000\014\003\ufffd\025\ufffd" +
    "\033\ufffd\034\ufffd\053\ufffd\001\002\000\004\053\025\001" +
    "\002\000\004\025\026\001\002\000\004\025\uffe8\001\002" +
    "\000\012\003\uffe5\025\uffe5\026\uffe5\053\uffe5\001\002\000" +
    "\012\003\031\025\030\026\uffe1\053\013\001\002\000\010" +
    "\026\uffe3\035\uffe3\053\uffe3\001\002\000\004\012\037\001" +
    "\002\000\012\003\uffe6\025\uffe6\026\uffe6\053\uffe6\001\002" +
    "\000\012\003\ufff2\025\ufff2\026\ufff2\053\ufff2\001\002\000" +
    "\004\026\036\001\002\000\014\003\uffea\025\uffea\033\uffea" +
    "\034\uffea\053\uffea\001\002\000\014\003\uffe7\025\uffe7\033" +
    "\uffe7\034\uffe7\053\uffe7\001\002\000\012\003\ufff1\025\ufff1" +
    "\026\ufff1\053\ufff1\001\002\000\010\026\044\035\046\053" +
    "\045\001\002\000\010\026\uffe4\035\uffe4\053\uffe4\001\002" +
    "\000\004\053\050\001\002\000\004\024\051\001\002\000" +
    "\004\026\uffe2\001\002\000\054\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6\024\ufff6" +
    "\027\ufff6\030\ufff6\045\ufff6\046\ufff6\053\ufff6\001\002\000" +
    "\004\053\050\001\002\000\004\024\uffdf\001\002\000\004" +
    "\024\uffdc\001\002\000\006\023\uffdd\053\045\001\002\000" +
    "\006\011\uffd7\023\uffd7\001\002\000\004\053\270\001\002" +
    "\000\006\011\266\023\uffde\001\002\000\004\023\056\001" +
    "\002\000\010\003\uffe5\025\uffe5\053\uffe5\001\002\000\010" +
    "\003\031\025\060\053\013\001\002\000\026\003\uffd9\025" +
    "\uffd9\026\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\053\uffd9\001\002\000\026\003\073\025\064\026" +
    "\076\036\070\040\063\041\077\042\075\043\062\044\074" +
    "\053\065\001\002\000\004\024\262\001\002\000\006\003" +
    "\170\024\171\001\002\000\026\003\uffd9\025\uffd9\026\uffd9" +
    "\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\053" +
    "\uffd9\001\002\000\062\003\uff94\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022\242\023\uff94" +
    "\024\uff94\027\241\030\uff94\031\uff94\032\uff94\045\uff94\046" +
    "\uff94\001\002\000\030\003\uffc7\025\uffc7\026\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\053" +
    "\uffc7\001\002\000\014\003\225\021\231\024\227\031\230" +
    "\032\226\001\002\000\006\003\170\024\171\001\002\000" +
    "\030\003\uffbf\025\uffbf\026\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\053\uffbf\001\002\000" +
    "\026\003\uffda\025\uffda\026\uffda\036\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\053\uffda\001\002\000\006\012" +
    "\166\026\167\001\002\000\004\024\157\001\002\000\020" +
    "\010\102\012\uffc8\024\uffab\047\uffab\051\uffab\052\uffab\053" +
    "\uffab\001\002\000\010\026\uffdb\035\uffdb\053\uffdb\001\002" +
    "\000\004\012\100\001\002\000\030\003\uffc3\025\uffc3\026" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\053\uffc3\001\002\000\004\012\156\001\002\000" +
    "\014\024\uffac\047\uffac\051\uffac\052\uffac\053\uffac\001\002" +
    "\000\004\012\uffc9\001\002\000\014\024\112\047\106\051" +
    "\111\052\113\053\065\001\002\000\046\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\023\uffa3\024\152" +
    "\030\uffa3\045\uffa3\046\uffa3\001\002\000\004\053\045\001" +
    "\002\000\044\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\023\uffa6\030\uffa6\045\uffa6\046\uffa6\001\002" +
    "\000\036\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\023\uffa9\030\uffa9" +
    "\045\uffa9\046\uffa9\001\002\000\044\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\016\uff9d\017\uff9d\020\uff9d\023\uff9d\030\uff9d\045" +
    "\uff9d\046\uff9d\001\002\000\016\010\102\024\uffab\047\uffab" +
    "\051\uffab\052\uffab\053\uffab\001\002\000\044\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\023\uff9c\030" +
    "\uff9c\045\uff9c\046\uff9c\001\002\000\004\023\115\001\002" +
    "\000\044\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\023\uff99\030\uff99\045\uff99\046\uff99\001\002\000" +
    "\036\007\120\010\121\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\023\uffa8\030\uffa8\045" +
    "\uffa8\046\uffa8\001\002\000\014\024\112\047\106\051\111" +
    "\052\113\053\065\001\002\000\014\024\uff8b\047\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\001\002\000\014\024\uff8a\047\uff8a" +
    "\051\uff8a\052\uff8a\053\uff8a\001\002\000\036\007\uffaa\010" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\023\uffaa\030\uffaa\045\uffaa\046\uffaa\001" +
    "\002\000\044\004\127\005\126\006\124\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\023\uffa5\030\uffa5\045\uffa5\046\uffa5\001\002" +
    "\000\014\024\uff87\047\uff87\051\uff87\052\uff87\053\uff87\001" +
    "\002\000\014\024\112\047\106\051\111\052\113\053\065" +
    "\001\002\000\014\024\uff88\047\uff88\051\uff88\052\uff88\053" +
    "\uff88\001\002\000\014\024\uff89\047\uff89\051\uff89\052\uff89" +
    "\053\uff89\001\002\000\044\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\023\uffa7\030\uffa7\045\uffa7\046" +
    "\uffa7\001\002\000\052\003\133\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\023\uffa1\024\135\027\132" +
    "\030\uffa1\045\uffa1\046\uffa1\001\002\000\016\010\102\024" +
    "\uffab\047\uffab\051\uffab\052\uffab\053\uffab\001\002\000\004" +
    "\030\147\001\002\000\044\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\023\uffa2\030\uffa2\045\uffa2\046" +
    "\uffa2\001\002\000\020\010\102\023\uffd3\024\uffab\047\uffab" +
    "\051\uffab\052\uffab\053\uffab\001\002\000\044\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\023\uff9b\030" +
    "\uff9b\045\uff9b\046\uff9b\001\002\000\004\023\uffd4\001\002" +
    "\000\004\023\146\001\002\000\006\011\uffb7\023\uffb7\001" +
    "\002\000\006\011\143\023\uffba\001\002\000\016\010\102" +
    "\024\uffab\047\uffab\051\uffab\052\uffab\053\uffab\001\002\000" +
    "\006\011\uffb8\023\uffb8\001\002\000\006\011\uffb9\023\uffb9" +
    "\001\002\000\044\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\023\uff9a\030\uff9a\045\uff9a\046\uff9a\001" +
    "\002\000\044\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\023\uff9f\030\uff9f\045\uff9f\046\uff9f\001\002" +
    "\000\004\030\151\001\002\000\044\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\023\uffa0\030\uffa0\045" +
    "\uffa0\046\uffa0\001\002\000\020\010\102\023\uffd3\024\uffab" +
    "\047\uffab\051\uffab\052\uffab\053\uffab\001\002\000\044\004" +
    "\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\023" +
    "\uff9e\030\uff9e\045\uff9e\046\uff9e\001\002\000\004\023\155" +
    "\001\002\000\044\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\023\uffa4\030\uffa4\045\uffa4\046\uffa4\001" +
    "\002\000\030\003\uffc2\025\uffc2\026\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\053\uffc2\001" +
    "\002\000\016\010\102\024\uffab\047\uffab\051\uffab\052\uffab" +
    "\053\uffab\001\002\000\006\011\161\023\uffbb\001\002\000" +
    "\004\051\165\001\002\000\004\023\163\001\002\000\004" +
    "\012\164\001\002\000\030\003\uffc0\025\uffc0\026\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\053\uffc0\001\002\000\004\023\uffbc\001\002\000\030\003" +
    "\uffd1\025\uffd1\026\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\053\uffd1\001\002\000\030\003" +
    "\uffbd\025\uffbd\026\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\053\uffbd\001\002\000\004\023" +
    "\223\001\002\000\016\010\102\024\uffab\047\uffab\051\uffab" +
    "\052\uffab\053\uffab\001\002\000\024\003\073\025\064\036" +
    "\070\040\063\041\077\042\075\043\062\044\074\053\065" +
    "\001\002\000\030\003\uffca\025\uffca\026\uffca\036\uffca\037" +
    "\174\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\053\uffca" +
    "\001\002\000\024\003\073\025\064\036\070\040\063\041" +
    "\077\042\075\043\062\044\074\053\065\001\002\000\030" +
    "\003\uffc5\025\uffc5\026\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\053\uffc5\001\002\000\030" +
    "\003\uffcb\025\uffcb\026\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\053\uffcb\001\002\000\010" +
    "\023\uffaf\045\uffaf\046\uffaf\001\002\000\006\023\uffb5\045" +
    "\uffb5\001\002\000\016\013\207\014\211\015\204\016\210" +
    "\017\212\020\205\001\002\000\004\023\203\001\002\000" +
    "\024\003\uffb4\025\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\053\uffb4\001\002\000\016\010\uff8f\024" +
    "\uff8f\047\uff8f\051\uff8f\052\uff8f\053\uff8f\001\002\000\016" +
    "\010\uff8c\024\uff8c\047\uff8c\051\uff8c\052\uff8c\053\uff8c\001" +
    "\002\000\016\010\102\024\uffab\047\uffab\051\uffab\052\uffab" +
    "\053\uffab\001\002\000\016\010\uff91\024\uff91\047\uff91\051" +
    "\uff91\052\uff91\053\uff91\001\002\000\016\010\uff8e\024\uff8e" +
    "\047\uff8e\051\uff8e\052\uff8e\053\uff8e\001\002\000\016\010" +
    "\uff90\024\uff90\047\uff90\051\uff90\052\uff90\053\uff90\001\002" +
    "\000\016\010\uff8d\024\uff8d\047\uff8d\051\uff8d\052\uff8d\053" +
    "\uff8d\001\002\000\010\023\uffad\045\uffad\046\uffad\001\002" +
    "\000\006\023\uffb2\045\215\001\002\000\016\010\102\024" +
    "\uffab\047\uffab\051\uffab\052\uffab\053\uffab\001\002\000\006" +
    "\023\uffb6\045\uffb6\001\002\000\010\023\uffae\045\uffae\046" +
    "\221\001\002\000\010\023\uffb0\045\uffb0\046\uffb0\001\002" +
    "\000\016\010\102\024\uffab\047\uffab\051\uffab\052\uffab\053" +
    "\uffab\001\002\000\010\023\uffb1\045\uffb1\046\uffb1\001\002" +
    "\000\024\003\uffb3\025\uffb3\036\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\053\uffb3\001\002\000\004\012\240" +
    "\001\002\000\004\023\237\001\002\000\004\012\uffcc\001" +
    "\002\000\020\010\102\023\uffd3\024\uffab\047\uffab\051\uffab" +
    "\052\uffab\053\uffab\001\002\000\004\012\uffcd\001\002\000" +
    "\016\010\102\024\uffab\047\uffab\051\uffab\052\uffab\053\uffab" +
    "\001\002\000\004\012\uffce\001\002\000\004\012\234\001" +
    "\002\000\030\003\uffd2\025\uffd2\026\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\053\uffd2\001" +
    "\002\000\004\023\236\001\002\000\004\012\uffd0\001\002" +
    "\000\004\012\uffcf\001\002\000\030\003\uffc6\025\uffc6\026" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\053\uffc6\001\002\000\016\010\102\024\uffab\047" +
    "\uffab\051\uffab\052\uffab\053\uffab\001\002\000\004\053\243" +
    "\001\002\000\062\003\uff95\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\045\uff95\046\uff95" +
    "\001\002\000\062\003\uff93\004\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\016\uff93\017\uff93\020\uff93\021\uff93\022\247\023\uff93\024" +
    "\uff93\027\245\030\uff93\031\uff93\032\uff93\045\uff93\046\uff93" +
    "\001\002\000\016\010\102\024\uffab\047\uffab\051\uffab\052" +
    "\uffab\053\uffab\001\002\000\062\003\uff96\004\uff96\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\027\uff96\030\uff96\031\uff96\032\uff96\045" +
    "\uff96\046\uff96\001\002\000\004\053\250\001\002\000\062" +
    "\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\045\uff98\046\uff98\001\002\000\004" +
    "\030\252\001\002\000\062\003\uff97\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\027\uff97\030\uff97\031\uff97\032\uff97\045\uff97" +
    "\046\uff97\001\002\000\004\030\254\001\002\000\062\003" +
    "\uff95\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\045\uff95\046\uff95\001\002\000\062\003" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\247\023\uff92\024\uff92\027\245\030\uff92" +
    "\031\uff92\032\uff92\045\uff92\046\uff92\001\002\000\026\003" +
    "\073\025\064\026\257\036\070\040\063\041\077\042\075" +
    "\043\062\044\074\053\065\001\002\000\030\003\uffbe\025" +
    "\uffbe\026\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\053\uffbe\001\002\000\024\003\073\025" +
    "\064\036\070\040\063\041\077\042\075\043\062\044\074" +
    "\053\065\001\002\000\030\003\uffc4\025\uffc4\026\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\053\uffc4\001\002\000\004\053\065\001\002\000\004\023" +
    "\264\001\002\000\004\012\265\001\002\000\030\003\uffc1" +
    "\025\uffc1\026\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\053\uffc1\001\002\000\004\053\045" +
    "\001\002\000\006\011\uffd8\023\uffd8\001\002\000\010\011" +
    "\uffd6\023\uffd6\027\271\001\002\000\004\030\272\001\002" +
    "\000\006\011\uffd5\023\uffd5\001\002\000\004\024\uffe0\001" +
    "\002\000\004\053\275\001\002\000\004\021\276\001\002" +
    "\000\006\051\277\052\300\001\002\000\004\012\ufff4\001" +
    "\002\000\004\012\ufff3\001\002\000\004\012\302\001\002" +
    "\000\014\003\ufff7\025\ufff7\033\ufff7\034\ufff7\053\ufff7\001" +
    "\002\000\004\053\305\001\002\000\006\011\uffed\012\uffed" +
    "\001\002\000\010\011\uffec\012\uffec\027\312\001\002\000" +
    "\006\011\307\012\310\001\002\000\004\053\305\001\002" +
    "\000\016\003\uffef\025\uffef\026\uffef\033\uffef\034\uffef\053" +
    "\uffef\001\002\000\006\011\uffee\012\uffee\001\002\000\004" +
    "\030\313\001\002\000\006\011\uffeb\012\uffeb\001\002\000" +
    "\014\003\ufff8\025\ufff8\033\ufff8\034\ufff8\053\ufff8\001\002" +
    "\000\014\003\uffe9\025\uffe9\033\uffe9\034\uffe9\053\uffe9\001" +
    "\002\000\010\026\317\035\046\053\045\001\002\000\004" +
    "\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\067\005\001\001\000\004\024\007\001\001\000\002" +
    "\001\001\000\016\003\013\004\020\005\010\025\021\060" +
    "\014\074\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\315\001" +
    "\001\000\002\001\001\000\004\077\302\001\001\000\004" +
    "\073\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\026\001\001\000\012\004\032\033\033\061" +
    "\031\074\016\001\001\000\004\031\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\040\070\042\073\041\001\001\000" +
    "\002\001\001\000\004\075\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\053" +
    "\034\054\035\051\073\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\056\001\001\000\010\004\032\061\031\074\016\001" +
    "\001\000\004\032\060\001\001\000\012\010\071\062\065" +
    "\063\070\072\066\001\001\000\002\001\001\000\004\064" +
    "\257\001\001\000\004\032\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\223\065\231\001\001\000" +
    "\004\064\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\102\041" +
    "\100\050\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\107\017\106\072\104\001\001" +
    "\000\004\053\152\001\001\000\004\073\130\001\001\000" +
    "\004\052\122\001\001\000\004\051\115\001\001\000\002" +
    "\001\001\000\006\015\113\050\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\116" +
    "\001\001\000\010\016\121\017\106\072\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\124\001\001\000\002\001\001\000\006\017\127\072" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\054\135\066\133\001\001\000\006\015" +
    "\147\050\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\136\015\140\037\137\050\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\141\001\001\000\004\044\143\001\001\000\006\015" +
    "\144\050\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\136\015\140\037\153\050\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\157\050\103\001\001" +
    "\000\004\042\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\201\013\177\014\176\015\200\050\103\001\001" +
    "\000\012\010\172\062\065\063\070\072\066\001\001\000" +
    "\004\040\174\001\001\000\012\010\175\062\065\063\070" +
    "\072\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\216\001\001\000\004\046\213\001\001\000\004" +
    "\020\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\212\050\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\215\014\176\015\200\050\103\001\001\000" +
    "\002\001\001\000\004\045\217\001\001\000\002\001\001" +
    "\000\010\014\221\015\200\050\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\136\015\140\037\234\050" +
    "\103\001\001\000\002\001\001\000\006\015\232\050\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\252\050\103\001\001\000" +
    "\002\001\001\000\004\056\243\001\001\000\004\055\245" +
    "\001\001\000\006\015\250\050\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\254\001" +
    "\001\000\004\055\245\001\001\000\012\010\071\062\065" +
    "\063\070\072\066\001\001\000\002\001\001\000\012\010" +
    "\260\062\065\063\070\072\066\001\001\000\002\001\001" +
    "\000\004\072\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\266\073\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\305\030\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\040" +
    "\070\042\073\041\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	innerClassDeclarations = 0;
	isInInnerClass = false;
	isGlobal = true;
	isPrimitive = false;
	isInMain = false;
	innerClassMethods = 0;
	mainClassMethods = 0;
	constDeclaration = 0;
	varDeclaration = 0;
	arrayDeclaration = 0;
	numOfFunctions = 0;
	numOfStatements = 0;
	errorDetected = false;
	numOfErrors = 0;
	
	variableType = "";
	returnType = "";


    }


	//public methods 
	public int innerClassDeclarations = 0;
	public boolean isInInnerClass = false;
	public boolean isGlobal = true;
	public boolean isPrimitive = false;
	public boolean isInMain = false;
	public int innerClassMethods = 0;
	public int mainClassMethods = 0;
	public int constDeclaration = 0;
	public int varDeclaration = 0;
	public int arrayDeclaration = 0;
	public int numOfFunctions = 0;
	public int numOfStatements = 0;
	
	public String variableType;
	public String returnType;
	
	public int numOfErrors = 0;
	
	public boolean errorDetected = false;
	
	//override methods
	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol curr_token)
	{
		report_error("\nSintaksna greska", curr_token);
		numOfErrors++;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("\nFatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}
	
	public void report_error(String message, Object info)
	{
		System.err.print(message);
		System.err.flush();
		if(info instanceof Symbol)
		{
			System.err.println(" na liniji " + ((Symbol)info).left);
		}
		else
		{
			System.err.println("");
		}
		
		errorDetected = true;
		
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	Struct var_type = Tab.noType;
	int argCnt = 0;
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // mulop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // relop ::= LESSEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relop ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relop ::= GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relop ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // relop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // designator ::= IDENT LSQUARE expr RSQUARE designator_list 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					if(ob.getType().getKind() != Struct.Array)
					{
						parser.report_error("Greska na liniji " + idleft + " ocekivan niz",null);
					}
					System.out.println("Pretraga " + idleft + " (" + id.toString() + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // designator ::= IDENT DOT IDENT designator_list 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					if(ob.getType().getKind() != Struct.Class)
					{
						//System.out.println("\n\n\n\n\n\n\n VRSTA JE " + ob.getKind() + "   " + ob.getName() );
						parser.report_error("Greska na liniji " + idleft + " ocekivana klasa",null);
					}
					System.out.println("Pretraga " + idleft + " (" + id.toString() + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // designator ::= IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					System.out.println("Pretraga " + idleft + " (" + id + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // designator_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // designator_list ::= designator_list designator_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // designator_part ::= LSQUARE expr RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_part",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // designator_part ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_part",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= NEW type LPAREN eventual_act_pars RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= NEW type eventual_p_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= designator eventual_b_act 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_in_index ::= error RSQUARE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ] na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_in_index",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_in_index ::= LSQUARE expr RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_in_index",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // eventual_p_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_p_expr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // eventual_p_expr ::= expr_in_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_p_expr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // eventual_b_act ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_b_act",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // eventual_b_act ::= LPAREN eventual_act_pars RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_b_act",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= factor multiple_mulop_factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // multiple_mulop_factor ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_mulop_factor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multiple_mulop_factor ::= multiple_mulop_factor mulop factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_mulop_factor",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= eventual_minus term multiple_addop_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // multiple_addop_term ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_addop_term",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // multiple_addop_term ::= multiple_addop_term addop term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_addop_term",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // eventual_minus ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_minus",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // eventual_minus ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_minus",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cond_fact ::= expr relop expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_fact",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cond_term ::= cond_fact multiple_and_cf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // multiple_and_cf ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_and_cf",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // multiple_and_cf ::= multiple_and_cf and_cf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_and_cf",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // and_cf ::= AND cond_fact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_cf",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condition ::= cond_term multiple_or_ct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cond_parens ::= error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_parens",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cond_parens ::= LPAREN condition RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_parens",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multiple_or_ct ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_or_ct",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multiple_or_ct ::= multiple_or_ct OR cond_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_or_ct",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiple_comma_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_comma_expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multiple_comma_expr ::= multiple_comma_expr comma_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_comma_expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comma_expr ::= COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_expr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // act_pars ::= expr multiple_comma_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_pars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // eventual_num ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_num",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // eventual_num ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_num",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement_in_braces ::= error RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_in_braces",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement_in_braces ::= LBRACE statement_list RBRACE 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_in_braces",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= statement_in_braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= PRINT LPAREN expr eventual_num RPAREN SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfFunctions++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= READ LPAREN designator RPAREN SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfFunctions++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= RETURN eventual_expr SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= WHILE cond_parens statement 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= IF cond_parens statement eventual_else 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= designator stat_par SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // eventual_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // eventual_expr ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // eventual_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_else",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // eventual_else ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_else",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stat_par ::= MINUSMINUS 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stat_par ::= PLUSPLUS 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stat_par ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_call ::= error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_call ::= LPAREN eventual_act_pars RPAREN 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfFunctions++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment ::= designator ASSIGN expr SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // eventual_act_pars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_act_pars",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // eventual_act_pars ::= act_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_act_pars",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // more_formal_pars ::= type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					Obj o = Tab.insert(Obj.Var, id, t);
					o.setFpPos(argCnt++);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_formal_pars",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // more_formal_pars ::= type IDENT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Obj o = Tab.insert(Obj.Var, id, t);
					o.setFpPos(argCnt++);
					 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_formal_pars",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // form_pars ::= more_formal_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_pars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // form_pars ::= form_pars COMMA more_formal_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_pars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_decl ::= type_or_void LPAREN eventual_formal_par RPAREN var_decl_list LBRACE statement_list RBRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
				if(parser.isInInnerClass)
				{
					parser.innerClassMethods++;
				}
				else
				{
					parser.mainClassMethods++;
				}
				
				//o.level = 0;
				o.setLevel(0);
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Tab.closeScope();
				
				if(parser.isInMain) parser.isInMain = false;
				argCnt = 0;
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_name ::= IDENT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = name;
				if(name.equals("main"))
				{
					parser.isInMain = true;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_name",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // eventual_formal_par ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_formal_par",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // eventual_formal_par ::= form_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_formal_par",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_or_void ::= VOID method_name 
            {
              Obj RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					
					RESULT = Tab.insert(Obj.Meth, mn, Tab.noType);
					Tab.openScope();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_or_void ::= type method_name 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					
					RESULT = Tab.insert(Obj.Meth, mn, t);
					Tab.openScope();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // option_in_class ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_in_class",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // option_in_class ::= LBRACE method_decl_list RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_in_class",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_decl_list ::= method_decl_list method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_decl_list ::= var_decl_list var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inner_class_end ::= RBRACE 
            {
              Object RESULT =null;
		
					parser.isInInnerClass = false;
					parser.isGlobal = true;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_class_end",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inner_class_name ::= IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.innerClassDeclarations++;
					parser.isInInnerClass = true;
					parser.isGlobal = false;
					
					RESULT = Tab.insert(Obj.Type, id.toString(), new Struct(Struct.Class));
					Tab.openScope();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_class_name",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_decl ::= error RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_decl ::= CLASS inner_class_name LBRACE var_decl_list option_in_class inner_class_end 
            {
              Object RESULT =null;
		int icnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int icnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj icn = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					//icn.type.fields = Tab.topScopeLocalsToLinkedList();
					icn.getType().setMembers(Tab.currentScope.getLocals());
					Tab.closeScope();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rep_var_part ::= IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.arrayDeclaration++;
					}
					
					Tab.insert(Obj.Var, id, new Struct(Struct.Array, var_type));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var_part",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rep_var_part ::= IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.varDeclaration++;
					}
					
					Tab.insert(Obj.Var, id, var_type);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var_part",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rep_var ::= rep_var_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rep_var ::= rep_var COMMA rep_var_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_decl ::= var_type NT$0 rep_var SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 var_type = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Izvrsen oporavak do ; na liniji " + lleft);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= var_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rhs ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rhs ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_type ::= IDENT 
            {
              Struct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		parser.variableType = id.toString();
		if(parser.isGlobal)
		{
			if(id.equals("int") || id.equals("char"))
			{
				parser.isPrimitive = true;	
			}
		}
		
		Obj nObj = Tab.find(id);
		if(nObj.getKind() == Obj.Type)
		{
			RESULT = nObj.getType();
		}
		else
		{
			parser.report_error("Greska na liniji " + idleft + " (" + id + ") nije tip", null);
			RESULT = Tab.noType;
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= IDENT 
            {
              Struct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Obj nObj = Tab.find(id);
			if(nObj.getKind() == Obj.Type)
			{
				RESULT = nObj.getType();
			}
			else
			{
				parser.report_error("Greska na liniji " + idleft + " (" + id + ") nije tip", null);
				RESULT = Tab.noType;
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_decl ::= FINAL type IDENT ASSIGN rhs SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				if(parser.isGlobal)
				{
					parser.constDeclaration++;
				}
				
				Tab.insert(Obj.Con, id, t);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_part ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_part ::= class_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_part ::= var_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_part ::= const_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= decl_list decl_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // start_main_program ::= LBRACE 
            {
              Object RESULT =null;
		
						parser.isGlobal = false;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_main_program",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog_name ::= IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = Tab.insert(Obj.Prog, id, Tab.noType);
				Tab.openScope();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_name",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS prog_name decl_list start_main_program method_decl_list RBRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Tab.closeScope();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

