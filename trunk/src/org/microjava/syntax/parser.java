
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 01 02:31:16 CET 2012
//----------------------------------------------------

package org.microjava.syntax;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 01 02:31:16 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\010\000\002\002\004\000\002\067" +
    "\003\000\002\064\003\000\002\026\004\000\002\026\002" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\004\000\002\003\010\000\002\010\003\000\002" +
    "\072\003\000\002\030\003\000\002\030\003\000\002\074" +
    "\003\000\002\074\004\000\002\004\007\000\002\071\003" +
    "\000\002\071\002\000\002\070\004\000\002\031\004\000" +
    "\002\031\002\000\002\032\004\000\002\032\002\000\002" +
    "\033\005\000\002\005\010\000\002\005\004\000\002\065" +
    "\003\000\002\066\003\000\002\025\004\000\002\025\002" +
    "\000\002\034\004\000\002\034\002\000\002\036\005\000" +
    "\002\036\002\000\002\037\003\000\002\037\003\000\002" +
    "\040\003\000\002\040\002\000\002\073\003\000\002\006" +
    "\013\000\002\035\004\000\002\035\002\000\002\007\006" +
    "\000\002\041\006\000\002\042\004\000\002\042\002\000" +
    "\002\044\003\000\002\044\002\000\002\075\006\000\002" +
    "\075\004\000\002\100\005\000\002\100\004\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\045\004" +
    "\000\002\045\002\000\002\046\003\000\002\046\002\000" +
    "\002\011\003\000\002\011\005\000\002\011\006\000\002" +
    "\011\005\000\002\011\004\000\002\011\005\000\002\011" +
    "\007\000\002\011\010\000\002\011\003\000\002\076\005" +
    "\000\002\076\004\000\002\047\004\000\002\047\002\000" +
    "\002\012\004\000\002\051\004\000\002\050\004\000\002" +
    "\050\002\000\002\053\005\000\002\053\002\000\002\077" +
    "\005\000\002\077\004\000\002\013\004\000\002\052\004" +
    "\000\002\054\004\000\002\054\002\000\002\014\004\000" +
    "\002\015\005\000\002\055\003\000\002\055\002\000\002" +
    "\056\005\000\002\056\002\000\002\016\005\000\002\057" +
    "\005\000\002\057\002\000\002\017\004\000\002\060\005" +
    "\000\002\060\002\000\002\061\003\000\002\061\002\000" +
    "\002\101\005\000\002\101\004\000\002\020\004\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\020" +
    "\007\000\002\020\005\000\002\062\004\000\002\062\005" +
    "\000\002\063\004\000\002\063\002\000\002\021\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\033\005\001\002\000\004\002\317\001" +
    "\002\000\004\053\007\001\002\000\014\003\ufffc\025\ufffc" +
    "\033\ufffc\034\ufffc\053\ufffc\001\002\000\014\003\ufffe\025" +
    "\ufffe\033\ufffe\034\ufffe\053\ufffe\001\002\000\014\003\016" +
    "\025\012\033\023\034\020\053\013\001\002\000\014\003" +
    "\ufff9\025\ufff9\033\ufff9\034\ufff9\053\ufff9\001\002\000\010" +
    "\026\uffff\035\uffff\053\uffff\001\002\000\004\053\ufff5\001" +
    "\002\000\014\003\ufffb\025\ufffb\033\ufffb\034\ufffb\053\ufffb" +
    "\001\002\000\010\026\uffe0\035\uffe0\053\uffe0\001\002\000" +
    "\006\012\313\026\314\001\002\000\004\053\300\001\002" +
    "\000\004\053\045\001\002\000\014\003\ufffa\025\ufffa\033" +
    "\ufffa\034\ufffa\053\ufffa\001\002\000\014\003\ufffd\025\ufffd" +
    "\033\ufffd\034\ufffd\053\ufffd\001\002\000\004\053\025\001" +
    "\002\000\004\025\026\001\002\000\004\025\uffe5\001\002" +
    "\000\012\003\uffe2\025\uffe2\026\uffe2\053\uffe2\001\002\000" +
    "\012\003\032\025\030\026\uffde\053\013\001\002\000\010" +
    "\026\uffe0\035\uffe0\053\uffe0\001\002\000\012\003\uffe3\025" +
    "\uffe3\026\uffe3\053\uffe3\001\002\000\004\012\037\001\002" +
    "\000\012\003\ufff2\025\ufff2\026\ufff2\053\ufff2\001\002\000" +
    "\004\026\036\001\002\000\014\003\uffe7\025\uffe7\033\uffe7" +
    "\034\uffe7\053\uffe7\001\002\000\014\003\uffe4\025\uffe4\033" +
    "\uffe4\034\uffe4\053\uffe4\001\002\000\012\003\ufff1\025\ufff1" +
    "\026\ufff1\053\ufff1\001\002\000\010\026\044\035\046\053" +
    "\045\001\002\000\010\026\uffe1\035\uffe1\053\uffe1\001\002" +
    "\000\004\053\uffdd\001\002\000\004\053\050\001\002\000" +
    "\004\026\uffdf\001\002\000\054\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\023\ufff6\024\ufff6" +
    "\027\ufff6\030\ufff6\045\ufff6\046\ufff6\053\ufff6\001\002\000" +
    "\004\053\uffdc\001\002\000\004\024\051\001\002\000\004" +
    "\024\uffd9\001\002\000\006\023\uffda\053\045\001\002\000" +
    "\004\053\257\001\002\000\004\023\uffdb\001\002\000\004" +
    "\023\055\001\002\000\010\003\uffe2\025\uffe2\053\uffe2\001" +
    "\002\000\010\003\032\025\057\053\013\001\002\000\026" +
    "\003\uffd6\025\uffd6\026\uffd6\036\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\053\uffd6\001\002\000\026\003\072" +
    "\025\063\026\075\036\067\040\062\041\076\042\074\043" +
    "\061\044\073\053\064\001\002\000\004\024\253\001\002" +
    "\000\006\003\167\024\170\001\002\000\026\003\uffd6\025" +
    "\uffd6\026\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\053\uffd6\001\002\000\062\003\uff92\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\023\uff92\024\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\045\uff92\046\uff92\001\002\000\030\003\uffc4\025\uffc4\026" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\053\uffc4\001\002\000\014\003\224\021\230\024" +
    "\226\031\227\032\225\001\002\000\006\003\167\024\170" +
    "\001\002\000\030\003\uffbc\025\uffbc\026\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\053\uffbc" +
    "\001\002\000\026\003\uffd7\025\uffd7\026\uffd7\036\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\053\uffd7\001\002" +
    "\000\006\012\165\026\166\001\002\000\004\024\156\001" +
    "\002\000\020\010\101\012\uffc5\024\uffa8\047\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\001\002\000\010\026\uffd8\035\uffd8\053" +
    "\uffd8\001\002\000\004\012\077\001\002\000\030\003\uffc0" +
    "\025\uffc0\026\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\053\uffc0\001\002\000\004\012\155" +
    "\001\002\000\014\024\uffa9\047\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\001\002\000\004\012\uffc6\001\002\000\014\024\111" +
    "\047\105\051\110\052\112\053\064\001\002\000\046\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\023" +
    "\uffa0\024\151\030\uffa0\045\uffa0\046\uffa0\001\002\000\004" +
    "\053\045\001\002\000\044\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\023\uffa3\030\uffa3\045\uffa3\046" +
    "\uffa3\001\002\000\036\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\023" +
    "\uffa6\030\uffa6\045\uffa6\046\uffa6\001\002\000\044\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\023\uff9a" +
    "\030\uff9a\045\uff9a\046\uff9a\001\002\000\016\010\101\024" +
    "\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002\000\044" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99" +
    "\023\uff99\030\uff99\045\uff99\046\uff99\001\002\000\004\023" +
    "\114\001\002\000\044\004\uff96\005\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\023\uff96\030\uff96\045\uff96\046\uff96" +
    "\001\002\000\036\007\117\010\120\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\023\uffa5" +
    "\030\uffa5\045\uffa5\046\uffa5\001\002\000\014\024\111\047" +
    "\105\051\110\052\112\053\064\001\002\000\014\024\uff8a" +
    "\047\uff8a\051\uff8a\052\uff8a\053\uff8a\001\002\000\014\024" +
    "\uff89\047\uff89\051\uff89\052\uff89\053\uff89\001\002\000\036" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\023\uffa7\030\uffa7\045\uffa7" +
    "\046\uffa7\001\002\000\044\004\126\005\125\006\123\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\023\uffa2\030\uffa2\045\uffa2\046" +
    "\uffa2\001\002\000\014\024\uff86\047\uff86\051\uff86\052\uff86" +
    "\053\uff86\001\002\000\014\024\111\047\105\051\110\052" +
    "\112\053\064\001\002\000\014\024\uff87\047\uff87\051\uff87" +
    "\052\uff87\053\uff87\001\002\000\014\024\uff88\047\uff88\051" +
    "\uff88\052\uff88\053\uff88\001\002\000\044\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\023\uffa4\030\uffa4" +
    "\045\uffa4\046\uffa4\001\002\000\052\003\132\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\023\uff9e\024" +
    "\134\027\131\030\uff9e\045\uff9e\046\uff9e\001\002\000\016" +
    "\010\101\024\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001" +
    "\002\000\004\030\146\001\002\000\044\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\023\uff9f\030\uff9f" +
    "\045\uff9f\046\uff9f\001\002\000\020\010\101\023\uffd0\024" +
    "\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002\000\044" +
    "\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\023\uff98\030\uff98\045\uff98\046\uff98\001\002\000\004\023" +
    "\uffd1\001\002\000\004\023\145\001\002\000\006\011\uffb4" +
    "\023\uffb4\001\002\000\006\011\142\023\uffb7\001\002\000" +
    "\016\010\101\024\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\001\002\000\006\011\uffb5\023\uffb5\001\002\000\006\011" +
    "\uffb6\023\uffb6\001\002\000\044\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\023\uff97\030\uff97\045\uff97" +
    "\046\uff97\001\002\000\044\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c" +
    "\016\uff9c\017\uff9c\020\uff9c\023\uff9c\030\uff9c\045\uff9c\046" +
    "\uff9c\001\002\000\004\030\150\001\002\000\044\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\023\uff9d" +
    "\030\uff9d\045\uff9d\046\uff9d\001\002\000\020\010\101\023" +
    "\uffd0\024\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002" +
    "\000\044\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\023\uff9b\030\uff9b\045\uff9b\046\uff9b\001\002\000" +
    "\004\023\154\001\002\000\044\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\023\uffa1\030\uffa1\045\uffa1" +
    "\046\uffa1\001\002\000\030\003\uffbf\025\uffbf\026\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\053\uffbf\001\002\000\016\010\101\024\uffa8\047\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\001\002\000\006\011\160\023\uffb8" +
    "\001\002\000\004\051\164\001\002\000\004\023\162\001" +
    "\002\000\004\012\163\001\002\000\030\003\uffbd\025\uffbd" +
    "\026\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\053\uffbd\001\002\000\004\023\uffb9\001\002" +
    "\000\030\003\uffce\025\uffce\026\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\053\uffce\001\002" +
    "\000\030\003\uffba\025\uffba\026\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\053\uffba\001\002" +
    "\000\004\023\222\001\002\000\016\010\101\024\uffa8\047" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002\000\024\003\072" +
    "\025\063\036\067\040\062\041\076\042\074\043\061\044" +
    "\073\053\064\001\002\000\030\003\uffc7\025\uffc7\026\uffc7" +
    "\036\uffc7\037\173\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\053\uffc7\001\002\000\024\003\072\025\063\036\067" +
    "\040\062\041\076\042\074\043\061\044\073\053\064\001" +
    "\002\000\030\003\uffc2\025\uffc2\026\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\053\uffc2\001" +
    "\002\000\030\003\uffc8\025\uffc8\026\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\053\uffc8\001" +
    "\002\000\010\023\uffac\045\uffac\046\uffac\001\002\000\006" +
    "\023\uffb2\045\uffb2\001\002\000\016\013\206\014\210\015" +
    "\204\016\207\017\211\020\205\001\002\000\004\023\202" +
    "\001\002\000\024\003\uffb1\025\uffb1\036\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\053\uffb1\001\002\000\016" +
    "\010\101\024\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001" +
    "\002\000\016\010\uff8e\024\uff8e\047\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\001\002\000\016\010\uff8b\024\uff8b\047\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\001\002\000\016\010\uff90\024\uff90" +
    "\047\uff90\051\uff90\052\uff90\053\uff90\001\002\000\016\010" +
    "\uff8d\024\uff8d\047\uff8d\051\uff8d\052\uff8d\053\uff8d\001\002" +
    "\000\016\010\uff8f\024\uff8f\047\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\001\002\000\016\010\uff8c\024\uff8c\047\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\001\002\000\010\023\uffaa\045\uffaa\046" +
    "\uffaa\001\002\000\006\023\uffaf\045\214\001\002\000\016" +
    "\010\101\024\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001" +
    "\002\000\006\023\uffb3\045\uffb3\001\002\000\010\023\uffab" +
    "\045\uffab\046\220\001\002\000\010\023\uffad\045\uffad\046" +
    "\uffad\001\002\000\016\010\101\024\uffa8\047\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\001\002\000\010\023\uffae\045\uffae\046" +
    "\uffae\001\002\000\024\003\uffb0\025\uffb0\036\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\053\uffb0\001\002\000" +
    "\004\012\237\001\002\000\004\023\236\001\002\000\004" +
    "\012\uffc9\001\002\000\020\010\101\023\uffd0\024\uffa8\047" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002\000\004\012\uffca" +
    "\001\002\000\016\010\101\024\uffa8\047\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\001\002\000\004\012\uffcb\001\002\000\004" +
    "\012\233\001\002\000\030\003\uffcf\025\uffcf\026\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\053\uffcf\001\002\000\004\023\235\001\002\000\004\012" +
    "\uffcd\001\002\000\004\012\uffcc\001\002\000\030\003\uffc3" +
    "\025\uffc3\026\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\053\uffc3\001\002\000\062\003\uff91" +
    "\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012" +
    "\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\243\023\uff91\024\uff91\027\241\030\uff91\031" +
    "\uff91\032\uff91\045\uff91\046\uff91\001\002\000\016\010\101" +
    "\024\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002\000" +
    "\062\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017" +
    "\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93\027\uff93" +
    "\030\uff93\031\uff93\032\uff93\045\uff93\046\uff93\001\002\000" +
    "\004\053\244\001\002\000\062\003\uff95\004\uff95\005\uff95" +
    "\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014" +
    "\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\uff95\024\uff95\027\uff95\030\uff95\031\uff95\032\uff95\045" +
    "\uff95\046\uff95\001\002\000\004\030\246\001\002\000\062" +
    "\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\045\uff94\046\uff94\001\002\000\026" +
    "\003\072\025\063\026\250\036\067\040\062\041\076\042" +
    "\074\043\061\044\073\053\064\001\002\000\030\003\uffbb" +
    "\025\uffbb\026\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\053\uffbb\001\002\000\024\003\072" +
    "\025\063\036\067\040\062\041\076\042\074\043\061\044" +
    "\073\053\064\001\002\000\030\003\uffc1\025\uffc1\026\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\053\uffc1\001\002\000\004\053\064\001\002\000\004" +
    "\023\255\001\002\000\004\012\256\001\002\000\030\003" +
    "\uffbe\025\uffbe\026\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\053\uffbe\001\002\000\010\011" +
    "\uffeb\023\uffeb\027\260\001\002\000\004\030\270\001\002" +
    "\000\006\011\uffd2\023\uffd2\001\002\000\006\011\263\023" +
    "\uffd5\001\002\000\004\053\045\001\002\000\006\011\uffd3" +
    "\023\uffd3\001\002\000\004\053\266\001\002\000\010\011" +
    "\uffeb\023\uffeb\027\260\001\002\000\006\011\uffd4\023\uffd4" +
    "\001\002\000\006\011\uffec\023\uffec\001\002\000\004\053" +
    "\272\001\002\000\004\021\273\001\002\000\006\051\274" +
    "\052\275\001\002\000\004\012\ufff4\001\002\000\004\012" +
    "\ufff3\001\002\000\004\012\277\001\002\000\014\003\ufff7" +
    "\025\ufff7\033\ufff7\034\ufff7\053\ufff7\001\002\000\010\011" +
    "\uffee\012\uffee\027\301\001\002\000\004\030\312\001\002" +
    "\000\006\011\uffef\012\uffef\001\002\000\006\011\uffe9\012" +
    "\uffe9\001\002\000\006\011\305\012\307\001\002\000\004" +
    "\053\310\001\002\000\006\011\uffea\012\uffea\001\002\000" +
    "\016\003\ufff0\025\ufff0\026\ufff0\033\ufff0\034\ufff0\053\ufff0" +
    "\001\002\000\010\011\uffee\012\uffee\027\301\001\002\000" +
    "\006\011\uffe8\012\uffe8\001\002\000\006\011\uffed\012\uffed" +
    "\001\002\000\014\003\ufff8\025\ufff8\033\ufff8\034\ufff8\053" +
    "\ufff8\001\002\000\014\003\uffe6\025\uffe6\033\uffe6\034\uffe6" +
    "\053\uffe6\001\002\000\010\026\316\035\046\053\045\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\064\005\001\001\000\004\026\007\001\001\000\002" +
    "\001\001\000\016\003\013\004\020\005\010\027\021\067" +
    "\014\072\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\026\001\001\000\012\004\032\036\033\072\016\074" +
    "\030\001\001\000\004\034\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\040\010\041\037\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\052\010\051\040\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\055\001\001\000\010\004\032\072\016" +
    "\074\030\001\001\000\004\035\057\001\001\000\012\011" +
    "\070\021\065\075\064\076\067\001\001\000\002\001\001" +
    "\000\004\077\250\001\001\000\004\035\246\001\001\000" +
    "\004\063\237\001\001\000\002\001\001\000\006\043\222" +
    "\100\230\001\001\000\004\077\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\101\046\077\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\106\020" +
    "\105\021\103\001\001\000\004\060\151\001\001\000\004" +
    "\010\127\001\001\000\004\057\121\001\001\000\004\056" +
    "\114\001\001\000\002\001\001\000\006\016\112\055\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\115\001\001\000\010\017\120\020\105" +
    "\021\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\123\001\001\000\002\001\001" +
    "\000\006\020\126\021\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\134\101\132" +
    "\001\001\000\006\016\146\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\135\016\137\044\136" +
    "\055\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\140\001\001\000\004\051\142" +
    "\001\001\000\006\016\143\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\135\016" +
    "\137\044\152\055\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\156\055\102\001\001\000\004\047\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\013\200\014\176\015\175\016" +
    "\177\055\102\001\001\000\012\011\171\021\065\075\064" +
    "\076\067\001\001\000\004\045\173\001\001\000\012\011" +
    "\174\021\065\075\064\076\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\215\001\001\000\004\053" +
    "\212\001\001\000\004\022\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\211\055\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\214\015\175\016\177" +
    "\055\102\001\001\000\002\001\001\000\004\052\216\001" +
    "\001\000\002\001\001\000\010\015\220\016\177\055\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\135" +
    "\016\137\044\233\055\102\001\001\000\002\001\001\000" +
    "\006\016\231\055\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\241" +
    "\001\001\000\006\016\244\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\070\021\065\075\064\076" +
    "\067\001\001\000\002\001\001\000\012\011\251\021\065" +
    "\075\064\076\067\001\001\000\002\001\001\000\004\021" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\260\001\001\000\002\001\001\000" +
    "\004\042\261\001\001\000\004\041\263\001\001\000\004" +
    "\010\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\070\301\071\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\303\001\001" +
    "\000\004\033\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\070\301\071\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\040\010\041\037\042\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	innerClassDeclarations = 0;
	isInInnerClass = false;
	isGlobal = true;
	isPrimitive = false;
	isInMain = false;
	innerClassMethods = 0;
	mainClassMethods = 0;
	constDeclaration = 0;
	varDeclaration = 0;
	arrayDeclaration = 0;
	numOfFunctions = 0;
	numOfStatements = 0;
	errorDetected = false;
	numOfErrors = 0;


    }


	//public methods 
	public int innerClassDeclarations = 0;
	public boolean isInInnerClass = false;
	public boolean isGlobal = true;
	public boolean isPrimitive = false;
	public boolean isInMain = false;
	public int innerClassMethods = 0;
	public int mainClassMethods = 0;
	public int constDeclaration = 0;
	public int varDeclaration = 0;
	public int arrayDeclaration = 0;
	public int numOfFunctions = 0;
	public int numOfStatements = 0;
	
	public int numOfErrors = 0;
	
	public boolean errorDetected = false;
	
	//override methods
	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol curr_token)
	{
		report_error("\nSintaksna greska", curr_token);
		numOfErrors++;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("\nFatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}
	
	public void report_error(String message, Object info)
	{
		System.err.print(message);
		System.err.flush();
		if(info instanceof Symbol)
		{
			System.err.println(" na liniji " + ((Symbol)info).left);
		}
		else
		{
			System.err.println("");
		}
		
		errorDetected = true;
		
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // mulop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // relop ::= LESSEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // relop ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relop ::= GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // relop ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // designator ::= IDENT designator_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // designator_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // designator_list ::= designator_list designator_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_list",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // designator_part ::= LSQUARE expr RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_part",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // designator_part ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_part",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= NEW type LPAREN eventual_act_pars RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= NEW type eventual_p_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= designator eventual_b_act 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_in_index ::= error RSQUARE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ] na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_in_index",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_in_index ::= LSQUARE expr RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_in_index",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // eventual_p_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_p_expr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // eventual_p_expr ::= expr_in_index 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_p_expr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // eventual_b_act ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_b_act",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // eventual_b_act ::= LPAREN eventual_act_pars RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_b_act",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // term ::= factor multiple_mulop_factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // multiple_mulop_factor ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_mulop_factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // multiple_mulop_factor ::= multiple_mulop_factor mulop factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_mulop_factor",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= eventual_minus term multiple_addop_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // multiple_addop_term ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_addop_term",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multiple_addop_term ::= multiple_addop_term addop term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_addop_term",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // eventual_minus ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_minus",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // eventual_minus ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_minus",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond_fact ::= expr relop expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_fact",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond_term ::= cond_fact multiple_and_cf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // multiple_and_cf ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_and_cf",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // multiple_and_cf ::= multiple_and_cf and_cf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_and_cf",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // and_cf ::= AND cond_fact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_cf",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condition ::= cond_term multiple_or_ct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond_parens ::= error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_parens",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond_parens ::= LPAREN condition RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_parens",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // multiple_or_ct ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_or_ct",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // multiple_or_ct ::= multiple_or_ct OR cond_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_or_ct",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // multiple_comma_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_comma_expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multiple_comma_expr ::= multiple_comma_expr comma_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_comma_expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comma_expr ::= COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_expr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // act_pars ::= expr multiple_comma_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_pars",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // eventual_num ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_num",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // eventual_num ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_num",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement_in_braces ::= error RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_in_braces",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement_in_braces ::= LBRACE statement_list RBRACE 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_in_braces",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= statement_in_braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= PRINT LPAREN expr eventual_num RPAREN SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfFunctions++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= READ LPAREN designator RPAREN SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfFunctions++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= RETURN eventual_expr SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= WHILE cond_parens statement 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= IF cond_parens statement eventual_else 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= designator stat_par SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // eventual_expr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // eventual_expr ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_expr",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // eventual_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_else",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // eventual_else ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_else",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stat_par ::= MINUSMINUS 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stat_par ::= PLUSPLUS 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stat_par ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_call ::= error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_call ::= LPAREN eventual_act_pars RPAREN 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfFunctions++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= designator ASSIGN expr SEMI 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // eventual_act_pars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_act_pars",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // eventual_act_pars ::= act_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_act_pars",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // more_formal_pars_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_formal_pars_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // more_formal_pars_list ::= more_formal_pars_list more_formal_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_formal_pars_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // more_formal_pars ::= COMMA type IDENT arr_sign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_formal_pars",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // form_pars ::= type IDENT arr_sign more_formal_pars_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_pars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_decl ::= type_or_void method_name LPAREN eventual_formal_par RPAREN var_decl_list LBRACE statement_list RBRACE 
            {
              Object RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
				if(parser.isInInnerClass)
				{
					parser.innerClassMethods++;
				}
				else
				{
					parser.mainClassMethods++;
				}
				
				if(mn.equals("main"))
				{
					parser.isInMain = false;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method_name ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = name;
				if(name.equals("main"))
				{
					parser.isInMain = true;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_name",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // eventual_formal_par ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_formal_par",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // eventual_formal_par ::= form_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_formal_par",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_or_void ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_or_void ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // option_in_class ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_in_class",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // option_in_class ::= LBRACE method_decl_list RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_in_class",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_decl_list ::= method_decl_list method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_decl_list ::= var_decl_list var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inner_class_end ::= RBRACE 
            {
              Object RESULT =null;
		
					parser.isInInnerClass = false;
					parser.isGlobal = true;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_class_end",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inner_class_name ::= IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.innerClassDeclarations++;
					parser.isInInnerClass = true;
					parser.isGlobal = false;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_class_name",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // class_decl ::= error RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // class_decl ::= CLASS inner_class_name LBRACE var_decl_list option_in_class inner_class_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rep_var_part ::= COMMA IDENT eventual_arr_in_decl 
            {
              Object RESULT =null;
		
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.varDeclaration++;
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var_part",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rep_var ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rep_var ::= rep_var rep_var_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arr_sign ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_sign",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arr_sign ::= LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_sign",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arr_in_decl ::= LSQUARE RSQUARE 
            {
              Object RESULT =null;
		
			if(parser.isGlobal)
			{
				if(parser.isPrimitive)
				{
					parser.varDeclaration--;
				}
				parser.arrayDeclaration++;
			}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_in_decl",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // eventual_arr_in_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_arr_in_decl",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // eventual_arr_in_decl ::= arr_in_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_arr_in_decl",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_decl ::= var_type IDENT eventual_arr_in_decl rep_var SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				if(parser.isGlobal)
				{
					if(t.equals("int") || t.equals("char")) parser.varDeclaration++;
					parser.isPrimitive = false;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Izvrsen oporavak do ; na liniji " + lleft);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= var_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rhs ::= CHARCONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rhs ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_type ::= IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id.toString();
		if(parser.isGlobal)
		{
			if(id.equals("int") || id.equals("char"))
			{
				parser.isPrimitive = true;	
			}
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_decl ::= FINAL type IDENT ASSIGN rhs SEMI 
            {
              Object RESULT =null;
		
				if(parser.isGlobal)
				{
					parser.constDeclaration++;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_part ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_part ::= class_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_part ::= var_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_part ::= const_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= decl_list decl_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_name ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_name",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // start_main_program ::= LBRACE 
            {
              Object RESULT =null;
		
						parser.isGlobal = false;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_main_program",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS class_name decl_list start_main_program method_decl_list RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

