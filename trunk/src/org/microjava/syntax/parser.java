
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 07 04:15:41 CET 2012
//----------------------------------------------------

package org.microjava.syntax;

import java_cup.runtime.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.factory.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.etf.pp1.symboltable.visitors.*;
import rs.etf.pp1.symboltable.*;
import java.util.ArrayList;
import java.util.Collection;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 07 04:15:41 CET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\010\000\002\002\004\000\002\052" +
    "\003\000\002\042\003\000\002\020\004\000\002\020\002" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\004\000\002\003\010\000\002\057\003\000\002" +
    "\061\003\000\002\062\003\000\002\062\003\000\002\043" +
    "\003\000\002\043\004\000\002\071\002\000\002\004\006" +
    "\000\002\022\005\000\002\022\003\000\002\056\003\000" +
    "\002\056\005\000\002\005\010\000\002\005\004\000\002" +
    "\054\003\000\002\041\003\000\002\017\004\000\002\017" +
    "\002\000\002\023\004\000\002\023\002\000\002\025\005" +
    "\000\002\025\002\000\002\047\004\000\002\047\003\000" +
    "\002\053\004\000\002\053\004\000\002\010\005\000\002" +
    "\010\003\000\002\026\004\000\002\026\006\000\002\067" +
    "\003\000\002\006\012\000\002\006\011\000\002\024\004" +
    "\000\002\024\002\000\002\044\006\000\002\044\004\000" +
    "\002\072\002\000\002\050\007\000\002\050\005\000\002" +
    "\027\003\000\002\027\004\000\002\027\004\000\002\030" +
    "\004\000\002\030\002\000\002\007\003\000\002\007\004" +
    "\000\002\007\006\000\002\073\002\000\002\007\006\000" +
    "\002\007\004\000\002\007\005\000\002\007\004\000\002" +
    "\007\007\000\002\007\010\000\002\007\003\000\002\045" +
    "\005\000\002\045\004\000\002\031\004\000\002\031\002" +
    "\000\002\011\003\000\002\011\004\000\002\051\003\000" +
    "\002\051\002\000\002\033\004\000\002\032\004\000\002" +
    "\032\003\000\002\035\005\000\002\035\002\000\002\046" +
    "\005\000\002\046\004\000\002\012\004\000\002\034\004" +
    "\000\002\036\004\000\002\036\002\000\002\013\004\000" +
    "\002\014\005\000\002\066\005\000\002\066\004\000\002" +
    "\060\003\000\002\060\004\000\002\060\005\000\002\060" +
    "\004\000\002\065\005\000\002\065\003\000\002\064\003" +
    "\000\002\064\005\000\002\063\003\000\002\063\006\000" +
    "\002\063\005\000\002\063\003\000\002\063\003\000\002" +
    "\063\004\000\002\063\007\000\002\063\007\000\002\063" +
    "\006\000\002\063\005\000\002\037\004\000\002\037\005" +
    "\000\002\040\004\000\002\040\002\000\002\055\003\000" +
    "\002\055\006\000\002\055\007\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\032\005\001\002\000\004\002\333\001" +
    "\002\000\004\052\007\001\002\000\014\003\ufffc\024\ufffc" +
    "\032\ufffc\033\ufffc\052\ufffc\001\002\000\014\003\uffff\024" +
    "\uffff\032\uffff\033\uffff\052\uffff\001\002\000\014\003\016" +
    "\024\012\032\023\033\020\052\013\001\002\000\014\003" +
    "\ufff9\024\ufff9\032\ufff9\033\ufff9\052\ufff9\001\002\000\010" +
    "\025\ufffe\034\ufffe\052\ufffe\001\002\000\004\052\ufff5\001" +
    "\002\000\014\003\ufffb\024\ufffb\032\ufffb\033\ufffb\052\ufffb" +
    "\001\002\000\010\025\uffe3\034\uffe3\052\uffe3\001\002\000" +
    "\006\012\326\025\327\001\002\000\004\052\ufff0\001\002" +
    "\000\004\052\043\001\002\000\014\003\ufffa\024\ufffa\032" +
    "\ufffa\033\ufffa\052\ufffa\001\002\000\014\003\ufffd\024\ufffd" +
    "\032\ufffd\033\ufffd\052\ufffd\001\002\000\004\052\025\001" +
    "\002\000\004\024\026\001\002\000\004\024\uffe8\001\002" +
    "\000\012\003\uffe5\024\uffe5\025\uffe5\052\uffe5\001\002\000" +
    "\012\003\031\024\030\025\uffe1\052\013\001\002\000\006" +
    "\034\044\052\043\001\002\000\004\012\037\001\002\000" +
    "\012\003\uffe6\024\uffe6\025\uffe6\052\uffe6\001\002\000\012" +
    "\003\ufff2\024\ufff2\025\ufff2\052\ufff2\001\002\000\004\025" +
    "\036\001\002\000\014\003\uffea\024\uffea\032\uffea\033\uffea" +
    "\052\uffea\001\002\000\014\003\uffe7\024\uffe7\032\uffe7\033" +
    "\uffe7\052\uffe7\001\002\000\012\003\ufff1\024\ufff1\025\ufff1" +
    "\052\ufff1\001\002\000\010\025\uffdf\034\uffdf\052\uffdf\001" +
    "\002\000\004\023\053\001\002\000\004\052\051\001\002" +
    "\000\052\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\022\ufff6\023\ufff6\026\ufff6\027\ufff6\044\ufff6\045\ufff6\052" +
    "\ufff6\053\ufff6\001\002\000\004\052\051\001\002\000\010" +
    "\025\047\034\044\052\043\001\002\000\010\025\uffe0\034" +
    "\uffe0\052\uffe0\001\002\000\004\025\uffe2\001\002\000\004" +
    "\023\uffdd\001\002\000\004\023\uffd8\001\002\000\004\023" +
    "\uffde\001\002\000\006\022\054\052\043\001\002\000\010" +
    "\003\uffe5\024\uffe5\052\uffe5\001\002\000\006\011\uffdb\022" +
    "\uffdb\001\002\000\004\052\277\001\002\000\006\011\060" +
    "\022\061\001\002\000\004\052\043\001\002\000\010\003" +
    "\uffe5\024\uffe5\052\uffe5\001\002\000\010\003\031\024\063" +
    "\052\013\001\002\000\026\003\uffd4\024\uffd4\025\uffd4\035" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\052\uffd4" +
    "\001\002\000\026\003\077\024\067\025\103\035\074\037" +
    "\066\040\104\041\102\042\065\043\100\052\070\001\002" +
    "\000\004\023\272\001\002\000\006\003\uffc6\023\uffc6\001" +
    "\002\000\026\003\uffd4\024\uffd4\025\uffd4\035\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\052\uffd4\001\002\000" +
    "\062\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\251\022\uff91\023\uff91\026\250\027\uff91" +
    "\030\uff91\031\uff91\044\uff91\045\uff91\053\uff91\001\002\000" +
    "\030\003\uffc9\024\uffc9\025\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\052\uffc9\001\002\000" +
    "\014\003\235\020\240\023\uffd1\030\237\031\236\001\002" +
    "\000\004\012\uffce\001\002\000\006\003\200\023\201\001" +
    "\002\000\030\003\uffbf\024\uffbf\025\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\052\uffbf\001" +
    "\002\000\026\003\uffd5\024\uffd5\025\uffd5\035\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\052\uffd5\001\002\000" +
    "\006\012\176\025\177\001\002\000\004\023\167\001\002" +
    "\000\004\012\166\001\002\000\020\010\106\012\113\023" +
    "\117\046\107\050\110\051\114\052\070\001\002\000\010" +
    "\025\uffd7\034\uffd7\052\uffd7\001\002\000\004\012\105\001" +
    "\002\000\030\003\uffc4\024\uffc4\025\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\052\uffc4\001" +
    "\002\000\014\023\117\046\107\050\110\051\114\052\070" +
    "\001\002\000\004\052\043\001\002\000\044\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\022\uff9c\027\uff9c\044" +
    "\uff9c\045\uff9c\053\uff9c\001\002\000\036\007\146\010\147" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\022\uffa7\027\uffa7\044\uffa7\045\uffa7\053\uffa7\001\002" +
    "\000\046\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\022\uff9f\023\133\027\uff9f\044\uff9f\045\uff9f\053\uff9f\001" +
    "\002\000\030\003\uffc2\024\uffc2\025\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\052\uffc2\001" +
    "\002\000\044\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\022\uff9b\027\uff9b\044\uff9b\045\uff9b\053\uff9b\001\002" +
    "\000\044\004\126\005\125\006\123\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\022\uffa1\027\uffa1\044\uffa1\045\uffa1\053\uffa1\001\002\000" +
    "\004\012\122\001\002\000\016\010\106\023\117\046\107" +
    "\050\110\051\114\052\070\001\002\000\004\022\121\001" +
    "\002\000\044\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017" +
    "\uff96\022\uff96\027\uff96\044\uff96\045\uff96\053\uff96\001\002" +
    "\000\030\003\uffc3\024\uffc3\025\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\052\uffc3\001\002" +
    "\000\014\023\uff84\046\uff84\050\uff84\051\uff84\052\uff84\001" +
    "\002\000\014\023\117\046\107\050\110\051\114\052\070" +
    "\001\002\000\014\023\uff85\046\uff85\050\uff85\051\uff85\052" +
    "\uff85\001\002\000\014\023\uff86\046\uff86\050\uff86\051\uff86" +
    "\052\uff86\001\002\000\044\004\126\005\125\006\123\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\022\uffa0\027\uffa0\044\uffa0\045\uffa0\053" +
    "\uffa0\001\002\000\044\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\022\uffa2\027\uffa2\044\uffa2\045\uffa2\053\uffa2" +
    "\001\002\000\014\023\117\046\107\050\110\051\114\052" +
    "\070\001\002\000\044\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\022\uffa3\027\uffa3\044\uffa3\045\uffa3\053\uffa3" +
    "\001\002\000\020\010\106\022\134\023\117\046\107\050" +
    "\110\051\114\052\070\001\002\000\044\004\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\022\uff9d\027\uff9d\044\uff9d" +
    "\045\uff9d\053\uff9d\001\002\000\006\011\140\022\uffba\001" +
    "\002\000\004\022\137\001\002\000\044\004\uff9e\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\017\uff9e\022\uff9e\027\uff9e\044\uff9e" +
    "\045\uff9e\053\uff9e\001\002\000\016\010\106\023\117\046" +
    "\107\050\110\051\114\052\070\001\002\000\006\011\uffb4" +
    "\022\uffb4\001\002\000\006\011\140\022\uffb9\001\002\000" +
    "\006\011\uffb5\022\uffb5\001\002\000\006\011\uffb6\022\uffb6" +
    "\001\002\000\014\023\117\046\107\050\110\051\114\052" +
    "\070\001\002\000\014\023\uff88\046\uff88\050\uff88\051\uff88" +
    "\052\uff88\001\002\000\014\023\uff87\046\uff87\050\uff87\051" +
    "\uff87\052\uff87\001\002\000\036\007\146\010\147\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\022" +
    "\uffa4\027\uffa4\044\uffa4\045\uffa4\053\uffa4\001\002\000\014" +
    "\023\117\046\107\050\110\051\114\052\070\001\002\000" +
    "\036\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\022\uffa9\027\uffa9\044\uffa9\045" +
    "\uffa9\053\uffa9\001\002\000\036\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\022" +
    "\uffa8\027\uffa8\044\uffa8\045\uffa8\053\uffa8\001\002\000\050" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\022\uff9a" +
    "\023\156\026\155\027\uff9a\044\uff9a\045\uff9a\053\uff9a\001" +
    "\002\000\016\010\106\023\117\046\107\050\110\051\114" +
    "\052\070\001\002\000\020\010\106\022\157\023\117\046" +
    "\107\050\110\051\114\052\070\001\002\000\044\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\017\uff97\022\uff97\027\uff97" +
    "\044\uff97\045\uff97\053\uff97\001\002\000\004\022\161\001" +
    "\002\000\044\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\022\uff98\027\uff98\044\uff98\045\uff98\053\uff98\001\002" +
    "\000\004\027\163\001\002\000\044\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\022\uff99\027\uff99\044\uff99\045" +
    "\uff99\053\uff99\001\002\000\036\007\146\010\147\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\022" +
    "\uffa6\027\uffa6\044\uffa6\045\uffa6\053\uffa6\001\002\000\036" +
    "\007\146\010\147\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\022\uffa5\027\uffa5\044\uffa5\045\uffa5" +
    "\053\uffa5\001\002\000\030\003\uffc8\024\uffc8\025\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\052\uffc8\001\002\000\016\010\106\023\117\046\107\050" +
    "\110\051\114\052\070\001\002\000\006\011\171\022\uffbb" +
    "\001\002\000\004\050\175\001\002\000\004\022\173\001" +
    "\002\000\004\012\174\001\002\000\030\003\uffc0\024\uffc0" +
    "\025\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\052\uffc0\001\002\000\004\022\uffbc\001\002" +
    "\000\030\003\uffd2\024\uffd2\025\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\052\uffd2\001\002" +
    "\000\030\003\uffbd\024\uffbd\025\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\052\uffbd\001\002" +
    "\000\004\022\233\001\002\000\016\010\106\023\117\046" +
    "\107\050\110\051\114\052\070\001\002\000\024\003\077" +
    "\024\067\035\074\037\066\040\104\041\102\042\065\043" +
    "\100\052\070\001\002\000\030\003\uffca\024\uffca\025\uffca" +
    "\035\uffca\036\204\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\052\uffca\001\002\000\024\003\077\024\067\035\074" +
    "\037\066\040\104\041\102\042\065\043\100\052\070\001" +
    "\002\000\030\003\uffc7\024\uffc7\025\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\052\uffc7\001" +
    "\002\000\030\003\uffcb\024\uffcb\025\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\052\uffcb\001" +
    "\002\000\004\022\232\001\002\000\006\022\uffb2\044\uffb2" +
    "\001\002\000\016\013\224\014\217\015\223\016\225\017" +
    "\220\053\222\001\002\000\010\022\uffac\044\uffac\045\uffac" +
    "\001\002\000\010\022\uffab\044\uffab\045\215\001\002\000" +
    "\010\022\uffad\044\uffad\045\uffad\001\002\000\016\010\106" +
    "\023\117\046\107\050\110\051\114\052\070\001\002\000" +
    "\010\022\uffae\044\uffae\045\uffae\001\002\000\016\010\uff8c" +
    "\023\uff8c\046\uff8c\050\uff8c\051\uff8c\052\uff8c\001\002\000" +
    "\016\010\uff89\023\uff89\046\uff89\050\uff89\051\uff89\052\uff89" +
    "\001\002\000\016\010\106\023\117\046\107\050\110\051" +
    "\114\052\070\001\002\000\016\010\uff8e\023\uff8e\046\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\001\002\000\016\010\uff8b\023" +
    "\uff8b\046\uff8b\050\uff8b\051\uff8b\052\uff8b\001\002\000\016" +
    "\010\uff8d\023\uff8d\046\uff8d\050\uff8d\051\uff8d\052\uff8d\001" +
    "\002\000\016\010\uff8a\023\uff8a\046\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\001\002\000\010\022\uffaa\044\uffaa\045\uffaa\001" +
    "\002\000\006\022\uffaf\044\230\001\002\000\016\010\106" +
    "\023\117\046\107\050\110\051\114\052\070\001\002\000" +
    "\006\022\uffb3\044\uffb3\001\002\000\024\003\uffb1\024\uffb1" +
    "\035\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\052" +
    "\uffb1\001\002\000\024\003\uffb0\024\uffb0\035\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\052\uffb0\001\002\000" +
    "\004\023\244\001\002\000\004\022\243\001\002\000\004" +
    "\012\uffcc\001\002\000\004\012\uffcd\001\002\000\016\010" +
    "\106\023\117\046\107\050\110\051\114\052\070\001\002" +
    "\000\004\012\242\001\002\000\030\003\uffd3\024\uffd3\025" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\052\uffd3\001\002\000\004\012\uffcf\001\002\000" +
    "\020\010\106\022\uffb7\023\117\046\107\050\110\051\114" +
    "\052\070\001\002\000\004\022\247\001\002\000\004\022" +
    "\uffb8\001\002\000\004\012\uffd0\001\002\000\016\010\106" +
    "\023\117\046\107\050\110\051\114\052\070\001\002\000" +
    "\004\052\252\001\002\000\062\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\023\uff92\026\uff92\027\uff92\030\uff92\031\uff92\044\uff92\045" +
    "\uff92\053\uff92\001\002\000\062\003\uff90\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\256\022\uff90" +
    "\023\uff90\026\254\027\uff90\030\uff90\031\uff90\044\uff90\045" +
    "\uff90\053\uff90\001\002\000\016\010\106\023\117\046\107" +
    "\050\110\051\114\052\070\001\002\000\062\003\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021" +
    "\uff93\022\uff93\023\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\044\uff93\045\uff93\053\uff93\001\002\000\004\052\257\001" +
    "\002\000\062\003\uff95\004\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\044\uff95\045\uff95\053\uff95\001" +
    "\002\000\004\027\261\001\002\000\062\003\uff94\004\uff94" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\013" +
    "\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\026\uff94\027\uff94\030\uff94\031\uff94\044" +
    "\uff94\045\uff94\053\uff94\001\002\000\004\027\263\001\002" +
    "\000\062\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010" +
    "\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\044\uff92\045\uff92\053\uff92\001\002" +
    "\000\062\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\256\022\uff8f\023\uff8f\026\254\027" +
    "\uff8f\030\uff8f\031\uff8f\044\uff8f\045\uff8f\053\uff8f\001\002" +
    "\000\026\003\077\024\067\025\266\035\074\037\066\040" +
    "\104\041\102\042\065\043\100\052\070\001\002\000\030" +
    "\003\uffbe\024\uffbe\025\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\052\uffbe\001\002\000\006" +
    "\003\200\023\201\001\002\000\024\003\077\024\067\035" +
    "\074\037\066\040\104\041\102\042\065\043\100\052\070" +
    "\001\002\000\030\003\uffc5\024\uffc5\025\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\052\uffc5" +
    "\001\002\000\004\052\070\001\002\000\004\022\274\001" +
    "\002\000\004\012\275\001\002\000\030\003\uffc1\024\uffc1" +
    "\025\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\052\uffc1\001\002\000\006\011\uffdc\022\uffdc" +
    "\001\002\000\010\011\uffda\022\uffda\026\300\001\002\000" +
    "\004\027\301\001\002\000\006\011\uffd9\022\uffd9\001\002" +
    "\000\010\003\031\024\303\052\013\001\002\000\026\003" +
    "\uffd4\024\uffd4\025\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\052\uffd4\001\002\000\026\003\077\024" +
    "\067\025\305\035\074\037\066\040\104\041\102\042\065" +
    "\043\100\052\070\001\002\000\010\025\uffd6\034\uffd6\052" +
    "\uffd6\001\002\000\004\052\307\001\002\000\004\020\310" +
    "\001\002\000\006\050\311\051\312\001\002\000\004\012" +
    "\ufff4\001\002\000\004\012\ufff3\001\002\000\004\012\314" +
    "\001\002\000\014\003\ufff7\024\ufff7\032\ufff7\033\ufff7\052" +
    "\ufff7\001\002\000\004\052\317\001\002\000\006\011\uffed" +
    "\012\uffed\001\002\000\010\011\uffec\012\uffec\026\324\001" +
    "\002\000\006\011\321\012\322\001\002\000\004\052\317" +
    "\001\002\000\016\003\uffef\024\uffef\025\uffef\032\uffef\033" +
    "\uffef\052\uffef\001\002\000\006\011\uffee\012\uffee\001\002" +
    "\000\004\027\325\001\002\000\006\011\uffeb\012\uffeb\001" +
    "\002\000\014\003\ufff8\024\ufff8\032\ufff8\033\ufff8\052\ufff8" +
    "\001\002\000\014\003\uffe9\024\uffe9\032\uffe9\033\uffe9\052" +
    "\uffe9\001\002\000\010\025\332\034\044\052\043\001\002" +
    "\000\010\025\uffe4\034\uffe4\052\uffe4\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\052\005\001\001\000\004\020\007\001\001\000\002" +
    "\001\001\000\016\003\013\004\020\005\010\021\021\042" +
    "\014\061\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\327\001" +
    "\001\000\002\001\001\000\004\071\314\001\001\000\004" +
    "\057\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\026\001\001\000\012\004\032\025\033\043" +
    "\031\061\016\001\001\000\012\006\037\047\044\053\040" +
    "\057\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\051\001\001\000\002\001\001" +
    "\000\004\067\047\001\001\000\010\006\045\053\040\057" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\056\026\054\057\055\001\001\000\004\017\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\275\057\055\001\001\000\004\017\061\001\001" +
    "\000\010\004\032\043\031\061\016\001\001\000\004\024" +
    "\063\001\001\000\016\007\075\027\100\044\070\045\074" +
    "\050\072\055\071\001\001\000\002\001\001\000\004\073" +
    "\266\001\001\000\004\024\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\233\001\001\000\002\001" +
    "\001\000\004\046\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\055\111\060\115\063\114\064\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\111\063\114\064\163\001\001\000\004\057\153" +
    "\001\001\000\002\001\001\000\006\015\144\066\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\123\001\001\000\002\001\001\000\012\055" +
    "\111\060\117\063\114\064\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\111\063\127\065\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\130\001\001\000\002\001" +
    "\001\000\006\055\111\063\131\001\001\000\002\001\001" +
    "\000\014\011\135\055\111\060\134\063\114\064\110\001" +
    "\001\000\002\001\001\000\006\032\141\033\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\055\111\060" +
    "\143\063\114\064\110\001\001\000\002\001\001\000\004" +
    "\033\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\111\063\114\064\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\150\001\001\000\010\055" +
    "\111\063\114\064\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\055\111\060\161\063" +
    "\114\064\110\001\001\000\014\011\157\055\111\060\134" +
    "\063\114\064\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\144\066\164\001\001\000\004\015\150\001" +
    "\001\000\002\001\001\000\012\055\111\060\167\063\114" +
    "\064\110\001\001\000\004\031\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\206\013\207\014\211\055\111" +
    "\060\210\063\114\064\110\001\001\000\016\007\202\027" +
    "\100\044\070\045\074\050\072\055\071\001\001\000\004" +
    "\030\204\001\001\000\016\007\205\027\100\044\070\045" +
    "\074\050\072\055\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\226\001\001\000" +
    "\004\070\220\001\001\000\004\036\212\001\001\000\004" +
    "\034\213\001\001\000\002\001\001\000\014\014\215\055" +
    "\111\060\210\063\114\064\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\055\111\060" +
    "\225\063\114\064\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\230\014\211\055\111" +
    "\060\210\063\114\064\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\055" +
    "\111\060\240\063\114\064\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\245\051" +
    "\244\055\111\060\134\063\114\064\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\055" +
    "\111\060\261\063\114\064\110\001\001\000\002\001\001" +
    "\000\004\040\252\001\001\000\004\037\254\001\001\000" +
    "\012\055\111\060\257\063\114\064\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\263" +
    "\001\001\000\004\037\254\001\001\000\016\007\075\027" +
    "\100\044\070\045\074\050\072\055\071\001\001\000\002" +
    "\001\001\000\004\046\267\001\001\000\016\007\270\027" +
    "\100\044\070\045\074\050\072\055\071\001\001\000\002" +
    "\001\001\000\004\055\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\032\043\031\061\016\001\001\000\004\024\303\001\001" +
    "\000\016\007\075\027\100\044\070\045\074\050\072\055" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\317\056\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\330" +
    "\053\040\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	innerClassDeclarations = 0;
	isInInnerClass = false;
	isGlobal = true;
	isPrimitive = false;
	isInMain = false;
	innerClassMethods = 0;
	mainClassMethods = 0;
	constDeclaration = 0;
	varDeclaration = 0;
	arrayDeclaration = 0;
	numOfFunctions = 0;
	numOfStatements = 0;
	errorDetected = false;
	numOfErrors = 0;
	
	variableType = "";
	returnType = null;
	currentClass = null;
	isInWhile = false;
	actualPars.add(null);

    }


	//public methods 
	public int innerClassDeclarations = 0;
	public boolean isInInnerClass = false;
	public boolean isGlobal = true;
	public boolean isPrimitive = false;
	public boolean isInMain = false;
	public int innerClassMethods = 0;
	public int mainClassMethods = 0;
	public int constDeclaration = 0;
	public int varDeclaration = 0;
	public int arrayDeclaration = 0;
	public int numOfFunctions = 0;
	public int numOfStatements = 0;
	
	public String variableType;
	public Struct returnType;
	public ArrayList<Struct> actualPars = new ArrayList<Struct>();
	
	public Struct currentClass = null;
	
	public boolean isInWhile = false;
	
	public int numOfErrors = 0;
	
	public boolean errorDetected = false;
	
	//override methods
	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol curr_token)
	{
		report_error("\nSintaksna greska", curr_token);
		numOfErrors++;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("\nFatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}
	
	public void report_error(String message, Object info)
	{
		System.err.print(message);
		System.err.flush();
		if(info instanceof Symbol)
		{
			System.err.println(" na liniji " + ((Symbol)info).left);
		}
		else
		{
			System.err.println("");
		}
		
		errorDetected = true;
		
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	Struct var_type = Tab.noType;
	int argCnt = 0;
	boolean isVoid = false;
	boolean returnFound = false;
	int numOfFormalPars = 0;
	int numOfActualPars = 0;
	
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // mulop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // mulop ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // relop ::= LESSEQUAL 
            {
              String RESULT =null;
		
			RESULT = "<=";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // relop ::= LESS 
            {
              String RESULT =null;
		
			RESULT = "<";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // relop ::= GREATEREQUAL 
            {
              String RESULT =null;
		
			RESULT = ">=";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // relop ::= GREATER 
            {
              String RESULT =null;
		
			RESULT = ">";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relop ::= NOTEQUAL 
            {
              String RESULT =null;
		
			RESULT = "!=";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relop ::= EQUAL 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "==";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // designator ::= IDENT LSQUARE expr RSQUARE designator_list 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					if(ob.getType().getKind() != Struct.Array)
					{
						parser.report_error("Greska na liniji " + idleft + " ocekivan niz",null);
					}
					System.out.println("Pretraga " + idleft + " (" + id.toString() + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
				
				if(ob.getType().getKind() != Struct.Array)
				{
					System.err.println("Semanticka greska na liniji " + idleft + ": " +  id +  " nije niz");
				}
				
				if(e.getKind() != Struct.Int)
				{
					System.err.println("Semanticka greska na liniji " + idleft + ": Izraz u srednjima zagradama nije tipa int");
				}
				
				RESULT = ob;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // designator ::= IDENT DOT IDENT designator_list 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					if(ob.getType().getKind() != Struct.Class)
					{
						parser.report_error("Greska na liniji " + idleft + " ocekivana klasa",null);
					}
					System.out.println("Pretraga " + idleft + " (" + id.toString() + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
				
				if(ob.getType().getKind() != Struct.Class)
				{
					System.err.println("Semanticka greska na liniji " + idleft + id +  " nije klasa");
				}
				else
				{
					SymbolDataStructure sdt = ob.getType().getMembers();
					Obj res = sdt.searchKey(id2);
					if(res == null)
					{
						RESULT = ob;
						System.err.println("Semanticka greska na liniji " + idleft + id2 +  " nije polje ove klase");
					}
					else
					{
						RESULT = res;
					}
				}
				
				
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // designator ::= IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					System.out.println("Pretraga " + idleft + " (" + id + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
				
				RESULT = ob;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // designator_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // designator_list ::= designator_list designator_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // designator_part ::= LSQUARE expr RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // designator_part ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("designator_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= LPAREN expr RPAREN 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = e;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // factor ::= NEW type LPAREN RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = t;
			
			if(t.getKind() != Struct.Class)
			{	
				System.err.println("Semanticka greska na liniji " + tleft + " Nakon new mora doci ime klase");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // factor ::= NEW type LPAREN act_pars RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			RESULT = t;
			
			if(t.getKind() != Struct.Class)
			{	
				System.err.println("Semanticka greska na liniji " + tleft + " Nakon new mora doci ime klase");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // factor ::= NEW type LSQUARE expr RSQUARE 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = t;
			if(e.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + tleft +  " izraz u [] nije tipa int");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= NEW type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = t;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= CHARCONST 
            {
              Struct RESULT =null;
		
			RESULT = Tab.charType;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= NUMBER 
            {
              Struct RESULT =null;
		
			RESULT = Tab.intType;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= designator LPAREN RPAREN 
            {
              Struct RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj d1 = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = d1.getType();
			if(d1.getKind() != Obj.Meth)
			{
				System.err.println("Semanticka greska na liniji " + d1left +  d1.getName() + " nije metoda");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= designator LPAREN act_pars RPAREN 
            {
              Struct RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj d1 = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			RESULT = d1.getType();
			if(d1.getKind() != Obj.Meth)
			{
				System.err.println("Semanticka greska na liniji " + d1left +  d1.getName() + " nije metoda");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = d.getType();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term ::= factor mulop multiple_mulop_factor 
            {
              Struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct mf = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(mf.getKind() != Struct.Int || f.getKind() != Struct.Int)
			{
				RESULT = Tab.noType;
			}
			else
			{
				RESULT = f;
			}
			
			if(f.getKind() != Struct.Int || mf.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + mfleft +  " Elementi izraza(mnozenje) nisu tipa int");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // term ::= factor 
            {
              Struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = f;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // multiple_mulop_factor ::= factor 
            {
              Struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							RESULT = f;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_mulop_factor",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // multiple_mulop_factor ::= multiple_mulop_factor mulop factor 
            {
              Struct RESULT =null;
		int mfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct mf = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							if(mf.getKind() != Struct.Int || f.getKind() != Struct.Int)
							{
								RESULT = Tab.noType;
							}
							else
							{
								RESULT = f;
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_mulop_factor",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= term multiple_addop_term 
            {
              Struct RESULT =null;
		int t0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct t0 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(t0.getKind() == t1.getKind())
			{
				RESULT = t0;
			}
			else
			{
				RESULT = Tab.noType;
			}
			
			if(t0.getKind() != Struct.Int || t1.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + t1left +  " Elementi izraza(sabiranje) nisu tipa int");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= MINUS term multiple_addop_term 
            {
              Struct RESULT =null;
		int t0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct t0 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(t0.getKind() == t1.getKind())
			{
				RESULT = t0;
			}
			else
			{
				RESULT = Tab.noType;
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= MINUS term 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(t1.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + t1left +  " nije tipa int");
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = t;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // multiple_addop_term ::= addop term 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = t1;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_addop_term",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // multiple_addop_term ::= multiple_addop_term addop term 
            {
              Struct RESULT =null;
		int t0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct t0 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(t0.getKind() == t2.getKind())
						{
							RESULT = t0;
						}
						else
						{
							RESULT = Tab.noType;
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_addop_term",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond_fact ::= expr relop expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Struct e1 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct e2 = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				if(!(e1.compatibleWith(e2)))
				{
					System.err.println("Semanticka greska na liniji " + e1left + ": Izrazi u uslovu nisu kompatibilni");
				}
				else
				{
					if(e1.getKind() == Struct.Array || e1.getKind() == Struct.Class)
					{
						
						if((!ro.equals("==")) && (!ro.equals("!=")))
						{
							System.err.println("Semanticka greska na liniji " + e1left + ": Izrazi su tipa niza ili klase a relacioni operator nije == ili !=");
						}
					}
				}
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_fact",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond_term ::= cond_fact multiple_and_cf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // multiple_and_cf ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_and_cf",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // multiple_and_cf ::= multiple_and_cf and_cf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_and_cf",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // and_cf ::= AND cond_fact 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_cf",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condition ::= cond_term multiple_or_ct 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cond_parens ::= error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_parens",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cond_parens ::= LPAREN condition RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_parens",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // multiple_or_ct ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_or_ct",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // multiple_or_ct ::= multiple_or_ct OR cond_term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_or_ct",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // multiple_comma_expr ::= comma_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_comma_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multiple_comma_expr ::= multiple_comma_expr comma_expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiple_comma_expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comma_expr ::= COMMA expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				numOfActualPars++;
				parser.actualPars.add(e);
				//System.err.println("DODAJE SE " + e.getKind());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comma_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // eventual_act_pars ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_act_pars",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // eventual_act_pars ::= act_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_act_pars",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // act_pars ::= expr multiple_comma_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				numOfActualPars++;
				parser.actualPars.set(0, e);
				//System.err.println("DODAJE SE " + e.getKind());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_pars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // act_pars ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				numOfActualPars++;
				parser.actualPars.set(0, e);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_pars",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // eventual_num ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_num",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // eventual_num ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_num",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement_in_braces ::= error RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_in_braces",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement_in_braces ::= LBRACE statement_list RBRACE 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_in_braces",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= statement_in_braces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= PRINT LPAREN expr eventual_num RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
					if(parser.isInMain) parser.numOfFunctions++;
					if(e.getKind() != Struct.Int && e.getKind() != Struct.Char)
					{
						System.err.println("Semanticka greska na liniji " + eleft + ": Izraz nije tipa int ili char. U funkciji  \"print\" dozvoljeno je koristiti samo int ili char");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= READ LPAREN designator RPAREN SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					if(parser.isInMain) parser.numOfFunctions++;
					
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}
					
					if((d.getType().getKind() != Struct.Int) && (d.getType().getKind() != Struct.Char))
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije tipa int ili char. U funkciji  \"read\" dozvoljeno je koristiti samo int ili char");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= RETURN SEMI 
            {
              Object RESULT =null;
		
				if(parser.isInMain) parser.numOfStatements++;
					returnFound = true;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= RETURN expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					if(parser.isInMain) parser.numOfStatements++;
					returnFound = true;
					
					if(parser.returnType != null && e.getKind() != parser.returnType.getKind())
					{
						System.err.println("Semanticka greska na liniji " + eleft + ": " + " povratni tip metode ne odgovara deklarisanom povratnom tipu");
					}
					
					if(isVoid)
					{
						System.err.println("Semanticka greska na liniji " + eleft + ": " + " Vracena vrednost u metodi deklarisanoj kao void");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(parser.isInMain) parser.numOfStatements++;
					
					if(!parser.isInWhile)
					{
						System.err.println("Semanticka greska na liniji " + sleft + ": " + " break se koristi van while petlje");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= WHILE NT$2 cond_parens statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					if(parser.isInMain) parser.numOfStatements++;
					parser.isInWhile = false;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              Object RESULT =null;
parser.isInWhile = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= IF cond_parens statement eventual_else 
            {
              Object RESULT =null;
		
					if(parser.isInMain) parser.numOfStatements++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= stat_par SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // eventual_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // eventual_else ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eventual_else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stat_par ::= designator MINUSMINUS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					if(parser.isInMain) parser.numOfStatements++;
					
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}
					
					if(d.getType().getKind() != Struct.Int)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije tipa int. Uz operator \"--\" se mora koristiti int");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stat_par ::= designator PLUSPLUS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					if(parser.isInMain) parser.numOfStatements++;
					
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}
					
					if(d.getType().getKind() != Struct.Int)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije tipa int. Uz operator \"++\" se mora koristiti int");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stat_par ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_par",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_call ::= designator error RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
					if(d.getKind() != Obj.Meth)
					{	
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije metoda");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_call ::= designator NT$1 LPAREN eventual_act_pars RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					if(parser.isInMain) parser.numOfFunctions++;
					
					if(d.getKind() != Obj.Meth)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije metoda");
					}
					
					if(d.getLevel() != numOfActualPars)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": ocekuje se " + d.getLevel() + " parametara u metodi " + d.getName() + " a dobijeno je " + numOfActualPars);					
					}
					else
					{
						if(numOfActualPars != 0)
						{
							Collection<Obj> locs = d.getLocalSymbols();
							for(Obj i : locs)
							{
								if(i.getLevel() == 1)
								{
									int position = i.getFpPos();
									//if(i.getType().getKind() != parser.actualPars.get(position).getKind())
									if(!(parser.actualPars.get(position).assignableTo(i.getType())))
									{
										System.err.println("Semanticka greska na liniji " + dleft + ": Formalni i stvarni argumenti na poziciji " + position + " nisu komatibilnih tipova ");
									}
								}
							
							}
						}
					}
					
									
					parser.actualPars.clear();
					parser.actualPars.add(null);
					numOfActualPars = 0;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$1 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 numOfActualPars = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignment ::= designator ASSIGN expr SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					if(parser.isInMain) parser.numOfStatements++;
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}  
					
					if(!e.assignableTo(d.getType()))
					{
						if((d.getType().getKind() == Struct.Array) && (!e.assignableTo(d.getType().getElemType())))
						{
							System.err.println("Semanticka greska na liniji " + dleft + ": tipovi nisu kompatibilni ");
						}
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // method_decl ::= type_or_void LPAREN RPAREN var_decl_list LBRACE statement_list RBRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
				if(parser.isInInnerClass)
				{
					parser.innerClassMethods++;
				}
				else
				{
					parser.mainClassMethods++;
				}
				
				//o.level = 0;
				o.setLevel(0);
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Tab.closeScope();
				
				if(parser.isInMain) parser.isInMain = false;
				argCnt = 0;
				
				if(!isVoid && !returnFound)
				{
					System.err.println("Semanticka greska na liniji " + oleft + ": Nije pronadjen return na kraju metode koja nije deklarisana kao void");
				}
				
				returnFound = false;
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_decl ::= type_or_void LPAREN form_pars RPAREN var_decl_list LBRACE statement_list RBRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
				if(parser.isInInnerClass)
				{
					parser.innerClassMethods++;
				}
				else
				{
					parser.mainClassMethods++;
				}
				
				//o.level = 0;
				o.setLevel(numOfFormalPars);
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Tab.closeScope();
				
				if(parser.isInMain) parser.isInMain = false;
				argCnt = 0;
				
				if(!isVoid && !returnFound)
				{
					System.err.println("Semanticka greska na liniji " + oleft + ": Nije pronadjen return na kraju metode koja nije deklarisana kao void");
				}
				
				returnFound = false;
				numOfFormalPars = 0;
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_name ::= IDENT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = name;
				if(name.equals("main"))
				{
					parser.isInMain = true;
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_name",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // more_formal_pars ::= type IDENT LSQUARE RSQUARE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					Obj o = Tab.insert(Obj.Var, id, t);
					o.setFpPos(argCnt++);
					o.setLevel(1);
					numOfFormalPars++;
					//System.err.println("INKREMENTIRANJE FORMAL "+ numOfFormalPars + " |||||||||" + argCnt );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_formal_pars",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // more_formal_pars ::= type IDENT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					Obj o = Tab.insert(Obj.Var, id, t);
					o.setFpPos(argCnt++);
					o.setLevel(1);
					numOfFormalPars++;
					//System.err.println("INKREMENTIRANJE FORMAL "+ numOfFormalPars + " |||||||||" + argCnt );
					 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("more_formal_pars",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // form_pars ::= more_formal_pars 
            {
              Object RESULT =null;
		
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_pars",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // form_pars ::= form_pars COMMA more_formal_pars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("form_pars",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_or_void ::= VOID method_name 
            {
              Obj RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					
					RESULT = Tab.insert(Obj.Meth, mn, Tab.noType);
					isVoid = true;
					Tab.openScope();
					if(parser.currentClass != null)
					{
						//Tab.insert(Obj.Var, "this", parser.currentClass);
						Tab.insert(Obj.Var, "this", Tab.intType);
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_or_void ::= type method_name 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					
					RESULT = Tab.insert(Obj.Meth, mn, t);
					Tab.openScope();
					if(parser.currentClass != null)
					{
						//Tab.insert(Obj.Var, "this", parser.currentClass);
						Tab.insert(Obj.Var, "this", Tab.intType);
					}
					isVoid = false;
					parser.returnType = t;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // class_method_list ::= method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_method_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // class_method_list ::= class_method_list method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_method_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // option_in_class ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_in_class",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // option_in_class ::= LBRACE class_method_list RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_in_class",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // method_decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // method_decl_list ::= method_decl_list method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_decl_list ::= var_decl_list var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inner_class_end ::= RBRACE 
            {
              Object RESULT =null;
		
					parser.isInInnerClass = false;
					parser.isGlobal = true;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_class_end",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inner_class_name ::= IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.innerClassDeclarations++;
					parser.isInInnerClass = true;
					parser.isGlobal = false;
					
					Struct thisClass = new Struct(Struct.Class);
					parser.currentClass = thisClass;
					RESULT = Tab.insert(Obj.Type, id.toString(), thisClass);
					Tab.openScope();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_class_name",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_decl ::= error RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_decl ::= CLASS inner_class_name LBRACE var_decl_list option_in_class inner_class_end 
            {
              Object RESULT =null;
		int icnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int icnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj icn = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
					//icn.type.fields = Tab.topScopeLocalsToLinkedList();
					icn.getType().setMembers(Tab.currentScope.getLocals());
					Tab.closeScope();
					parser.currentClass = null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rep_var_part ::= IDENT LSQUARE RSQUARE 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.arrayDeclaration++;
					}
					
					if(parser.currentClass == null)
					{
						RESULT = Tab.insert(Obj.Var, id, new Struct(Struct.Array, var_type));
					}
					else
					{
						RESULT = Tab.insert(Obj.Fld, id, new Struct(Struct.Array, var_type));
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var_part",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rep_var_part ::= IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.varDeclaration++;
					}
					
					if(parser.currentClass == null)
					{
								
						RESULT = Tab.insert(Obj.Var, id, var_type);
					}
					else
					{
						RESULT = Tab.insert(Obj.Fld, id, var_type);
					}
					
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var_part",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rep_var ::= rep_var_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rep_var ::= rep_var COMMA rep_var_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_decl ::= var_type NT$0 rep_var SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 var_type = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Izvrsen oporavak do ; na liniji " + lleft);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= var_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rhs ::= CHARCONST 
            {
              Struct RESULT =null;
		
		RESULT = Tab.charType;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rhs ::= NUMBER 
            {
              Struct RESULT =null;
		
		RESULT = Tab.intType;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_type ::= IDENT 
            {
              Struct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		parser.variableType = id.toString();
		if(parser.isGlobal)
		{
			if(id.equals("int") || id.equals("char"))
			{
				parser.isPrimitive = true;	
			}
		}
		
		Obj nObj = Tab.find(id);
		if(nObj.getKind() == Obj.Type)
		{
			RESULT = nObj.getType();
		}
		else
		{
			parser.report_error("Greska na liniji " + idleft + " (" + id + ") nije tip", null);
			RESULT = Tab.noType;
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= IDENT 
            {
              Struct RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			Obj nObj = Tab.find(id);
			if(nObj.getKind() == Obj.Type)
			{
				RESULT = nObj.getType();
			}
			else
			{
				parser.report_error("Greska na liniji " + idleft + " (" + id + ") nije tip", null);
				RESULT = Tab.noType;
			}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_decl ::= FINAL type IDENT ASSIGN rhs SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Struct r = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				if(parser.isGlobal)
				{
					parser.constDeclaration++;
				}
				
				if(t.getKind() != r.getKind())
				{
					System.err.print("Semanricka greska na liniji " + idleft + ": Ocekuje se ");
					switch(t.getKind())
					{
					case 1: System.err.println("int prilikom inicijalizacije konstante "); break;
					case 2: System.err.println("char prilikom inicijalizacije konstante "); break;
					}
				}
				
				Tab.insert(Obj.Con, id, t);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_part ::= error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_part ::= class_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_part ::= var_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_part ::= const_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_part",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_list ::= decl_list decl_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // start_main_program ::= LBRACE 
            {
              Object RESULT =null;
		
						parser.isGlobal = false;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_main_program",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog_name ::= IDENT 
            {
              Obj RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = Tab.insert(Obj.Prog, id, Tab.noType);
				Tab.openScope();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog_name",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS prog_name decl_list start_main_program method_decl_list RBRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Tab.closeScope();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

