package org.microjava.syntax;

import java_cup.runtime.*;

parser code {:
	//public methods 
	public int innerClassDeclarations = 0;
	public boolean isInInnerClass = false;
	public boolean isGlobal = true;
	public boolean isPrimitive = false;
	public boolean isInMain = false;
	public int innerClassMethods = 0;
	public int mainClassMethods = 0;
	public int constDeclaration = 0;
	public int varDeclaration = 0;
	public int arrayDeclaration = 0;
	public int numOfFunctions = 0;
	public int numOfStatements = 0;
	
	public int numOfErrors = 0;
	
	public boolean errorDetected = false;
	
	//override methods
	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol curr_token)
	{
		report_error("\nSintaksna greska", curr_token);
		numOfErrors++;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("\nFatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}
	
	public void report_error(String message, Object info)
	{
		System.err.print(message);
		System.err.flush();
		if(info instanceof Symbol)
		{
			System.err.println(" na liniji " + ((Symbol)info).left);
		}
		else
		{
			System.err.println("");
		}
		
		errorDetected = true;
		
	}
:}

init with {:
	innerClassDeclarations = 0;
	isInInnerClass = false;
	isGlobal = true;
	isPrimitive = false;
	isInMain = false;
	innerClassMethods = 0;
	mainClassMethods = 0;
	constDeclaration = 0;
	varDeclaration = 0;
	arrayDeclaration = 0;
	numOfFunctions = 0;
	numOfStatements = 0;
	errorDetected = false;
	numOfErrors = 0;

:};

terminal TIMES, DIVIDE, MOD;
terminal PLUS, MINUS;
terminal COMMA, SEMI, EQUAL, NOTEQUAL, GREATER, GREATEREQUAL, LESS, LESSEQUAL, ASSIGN, DOT;
terminal RPAREN, LPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE;
terminal PLUSPLUS, MINUSMINUS;
terminal CLASS, FINAL, VOID;
terminal IF, ELSE, WHILE, BREAK, RETURN, READ, PRINT;
terminal OR, AND, NEW;
terminal INVALID;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal String IDENT;

non terminal program, const_decl, var_decl, class_decl;
non terminal method_decl, form_pars, type, statement;
non terminal act_pars, condition, cond_term, cond_fact;
non terminal expr, term, factor, designator, relop, addop, mulop;
non terminal var_decl_list, decl_list, decl_part, rhs, arr_sign, rep_var, rep_var_part;
non terminal method_decl_list, statement_list;
non terminal option_in_class, type_or_void, eventual_formal_par, more_formal_pars, more_formal_pars_list; 
non terminal stat_par, eventual_act_pars, eventual_else, eventual_expr, eventual_num, multiple_comma_expr;
non terminal comma_expr, and_cf, multiple_or_ct, multiple_and_cf, eventual_minus, multiple_addop_term, multiple_mulop_factor;
non terminal eventual_b_act, eventual_p_expr, designator_part, designator_list, class_name, inner_class_name, inner_class_end;
non terminal start_main_program, arr_in_decl, eventual_arr_in_decl, var_type, method_name, var, assignment, statement_in_braces, cond_parens;
non terminal function_call, expr_in_index;

precedence right ELSE;

program ::= CLASS class_name decl_list start_main_program method_decl_list RBRACE;
			

start_main_program ::= LBRACE
					{:
						parser.isGlobal = false;
					:};


class_name ::= IDENT;

decl_list ::= decl_list decl_part
			|
			/* epsilon */;
		
decl_part ::= const_decl
			| var_decl
			| class_decl
			| error SEMI:l
				{:
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				:};
			
const_decl ::= FINAL type IDENT ASSIGN rhs SEMI
			{:
				if(parser.isGlobal)
				{
					parser.constDeclaration++;
				}
			:};

type ::= IDENT;


var_type ::= IDENT:id
	{:
		RESULT = id.toString();
		if(parser.isGlobal)
		{
			if(id.equals("int") || id.equals("char"))
			{
				parser.isPrimitive = true;	
			}
		}
	:};

rhs ::=  NUMBER
	| CHARCONST;
	
	
var ::= var_decl
		| error SEMI:l
		{:
			System.out.println("Izvrsen oporavak do ; na liniji " + lleft);
		:};
	
				
var_decl ::= var_type:t IDENT:i eventual_arr_in_decl rep_var SEMI
			{:
				if(parser.isGlobal)
				{
					if(t.equals("int") || t.equals("char")) parser.varDeclaration++;
					parser.isPrimitive = false;
				}
			:};
			
			
eventual_arr_in_decl ::= arr_in_decl
						| /* eps */;

arr_in_decl ::= LSQUARE RSQUARE
			{:
			if(parser.isGlobal)
			{
				if(parser.isPrimitive)
				{
					parser.varDeclaration--;
				}
				parser.arrayDeclaration++;
			}
			:};

arr_sign ::= LSQUARE RSQUARE
			| /* epsilon */;
			
rep_var ::= rep_var rep_var_part
			| /* eps */;
			
rep_var_part ::= COMMA IDENT eventual_arr_in_decl
				{:
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.varDeclaration++;
					}
				:};


class_decl ::= CLASS inner_class_name LBRACE var_decl_list option_in_class inner_class_end
			| error RBRACE:l
				{:
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				:};
				
				
inner_class_name ::= IDENT:id
				{:
					parser.innerClassDeclarations++;
					parser.isInInnerClass = true;
					parser.isGlobal = false;
				:};
				
inner_class_end ::= RBRACE
				{:
					parser.isInInnerClass = false;
					parser.isGlobal = true;
				:};

var_decl_list ::= var_decl_list var
				| /* epsilon */;

method_decl_list ::= method_decl_list method_decl
					| /* epsilon */;

option_in_class ::= LBRACE method_decl_list RBRACE
				| /* epsilon */;

type_or_void ::= type 
				| VOID;				
				
eventual_formal_par ::= form_pars
					| /* epsilon */;
					


method_name ::= IDENT:name
			{:
				RESULT = name;
				if(name.equals("main"))
				{
					parser.isInMain = true;
				}
			:};
				
method_decl ::= type_or_void method_name:mn LPAREN eventual_formal_par RPAREN var_decl_list LBRACE statement_list RBRACE
			{:
				if(parser.isInInnerClass)
				{
					parser.innerClassMethods++;
				}
				else
				{
					parser.mainClassMethods++;
				}
				
				if(mn.equals("main"))
				{
					parser.isInMain = false;
				}
			:};  

statement_list ::= statement_list statement
				| /* eps */;
				
form_pars ::= type IDENT arr_sign more_formal_pars_list;

more_formal_pars ::= COMMA type IDENT arr_sign;

more_formal_pars_list ::= more_formal_pars_list more_formal_pars
						| /* epsilon */;
	
	
eventual_act_pars ::= act_pars
					| /* epsilon */;

assignment ::= designator ASSIGN expr SEMI
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:}					
				| error SEMI:l
				{:
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				:};
					
					
function_call ::= LPAREN eventual_act_pars RPAREN
				{:
					if(parser.isInMain) parser.numOfFunctions++;
				:}
				| error RPAREN:l	
				{:
					parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
				:};
									
stat_par ::= function_call
			| PLUSPLUS
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:}
			| MINUSMINUS
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:};  
						
eventual_else ::= ELSE statement
				| /* epsilon */;
				
				
eventual_expr ::= expr
				| /* epsilon */;
												
statement ::= assignment
			| designator stat_par SEMI
			| IF cond_parens statement eventual_else
			    {:
					if(parser.isInMain) parser.numOfStatements++;
				:}
			| WHILE cond_parens statement
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:}
			| BREAK SEMI
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:}
			| RETURN eventual_expr SEMI
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:}
			| READ LPAREN designator RPAREN SEMI
				{:
					if(parser.isInMain) parser.numOfFunctions++;
				:}
			| PRINT LPAREN expr eventual_num RPAREN SEMI
				{:
					if(parser.isInMain) parser.numOfFunctions++;
				:}
			| statement_in_braces;
				
statement_in_braces ::= LBRACE statement_list RBRACE
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:}
				| error RBRACE:l
				{:
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				:};
			
eventual_num ::= COMMA NUMBER
				| /* epsilon */;
				
act_pars ::= expr multiple_comma_expr;    

comma_expr ::= COMMA expr;

multiple_comma_expr ::= multiple_comma_expr comma_expr
					| /* epsilon */; 
					
		
multiple_or_ct ::= multiple_or_ct OR cond_term
				| /* epsilon */;
				
cond_parens ::= LPAREN condition RPAREN
			| error RPAREN:l
			{:
				parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
			:};

condition ::= cond_term multiple_or_ct;

and_cf ::= AND cond_fact;

multiple_and_cf ::= multiple_and_cf and_cf
				| /* epsilon */;
				
cond_term ::= cond_fact multiple_and_cf;

cond_fact ::= expr relop expr;

eventual_minus ::= MINUS
				| /* epsilon */;
				
multiple_addop_term ::= multiple_addop_term addop term
					| /* epsilon */;

expr ::= eventual_minus term multiple_addop_term;


multiple_mulop_factor ::= multiple_mulop_factor mulop factor
						| /* epsilon */;
						
term ::= factor multiple_mulop_factor;

eventual_b_act ::= LPAREN eventual_act_pars RPAREN
				| /* epsilon */;
				
eventual_p_expr ::= expr_in_index
				| /* eps */;
				
expr_in_index ::= LSQUARE expr RSQUARE
				| error RSQUARE:l
				{:
					parser.report_error("Izvrsen oporavak do ] na liniji " + lleft, null);
				:};

factor ::= designator eventual_b_act
		| NUMBER
		| CHARCONST
		| NEW type eventual_p_expr
		| NEW type LPAREN eventual_act_pars RPAREN
		| LPAREN expr RPAREN;
		
designator_part ::= DOT IDENT
				| LSQUARE expr RSQUARE;
				
designator_list ::= designator_list designator_part
				| /* epsilon */;
						
designator ::= IDENT designator_list;

relop ::= EQUAL
		| NOTEQUAL
		| GREATER
		| GREATEREQUAL
		| LESS
		| LESSEQUAL;
		
addop ::= PLUS
		| MINUS;
		
mulop ::= TIMES
		| DIVIDE
		| MOD;

















