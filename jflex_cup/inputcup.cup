package org.microjava.syntax;

import java_cup.runtime.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.factory.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.etf.pp1.symboltable.visitors.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.mj.runtime.*;

import java.util.ArrayList;
import java.util.Collection;

parser code {:
	//public methods 
	public int innerClassDeclarations = 0;
	public boolean isInInnerClass = false;
	public boolean isGlobal = true;
	public boolean isPrimitive = false;
	public boolean isInMain = false;
	public int innerClassMethods = 0;
	public int mainClassMethods = 0;
	public int constDeclaration = 0;
	public int varDeclaration = 0;
	public int arrayDeclaration = 0;
	public int numOfFunctions = 0;
	public int numOfStatements = 0;
	
	public String variableType;
	public Struct returnType;
	public ArrayList<Struct> actualPars = new ArrayList<Struct>();
	
	public Struct currentClass = null;
	
	public boolean isInWhile = false;
	
	public int numOfErrors = 0;
	
	public boolean errorDetected = false;
	
	//override methods
	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}
	
	public void syntax_error(Symbol curr_token)
	{
		report_error("\nSintaksna greska", curr_token);
		numOfErrors++;
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("\nFatalna greska, parsiranje se ne moze nastaviti", cur_token);
	}
	
	public void report_error(String message, Object info)
	{
		System.err.print(message);
		System.err.flush();
		if(info instanceof Symbol)
		{
			System.err.println(" na liniji " + ((Symbol)info).left);
		}
		else
		{
			System.err.println("");
		}
		
		errorDetected = true;
		
	}
:}

action code {:
	Struct var_type = Tab.noType;
	int argCnt = 0;
	boolean isVoid = false;
	boolean returnFound = false;
	int numOfFormalPars = 0;
	int numOfActualPars = 0;
	int constNumVal = 0;
	boolean parametersFound = false;
	String currentAddop;
	String currentMulop;
:}

init with {:
	innerClassDeclarations = 0;
	isInInnerClass = false;
	isGlobal = true;
	isPrimitive = false;
	isInMain = false;
	innerClassMethods = 0;
	mainClassMethods = 0;
	constDeclaration = 0;
	varDeclaration = 0;
	arrayDeclaration = 0;
	numOfFunctions = 0;
	numOfStatements = 0;
	errorDetected = false;
	numOfErrors = 0;
	
	variableType = "";
	returnType = null;
	currentClass = null;
	isInWhile = false;
	actualPars.add(null);
:};

terminal TIMES, DIVIDE, MOD;
terminal PLUS, MINUS;
terminal COMMA, SEMI, NOTEQUAL, GREATER, GREATEREQUAL, LESS, LESSEQUAL, ASSIGN, DOT;
terminal RPAREN, LPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE;
terminal PLUSPLUS, MINUSMINUS;
terminal CLASS, FINAL, VOID;
terminal IF, ELSE, WHILE, BREAK, RETURN, READ, PRINT;
terminal OR, AND, NEW;
terminal INVALID;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal String IDENT, EQUAL;

non terminal program, const_decl, var_decl, class_decl;
non terminal method_decl, statement, form_pars;
non terminal act_pars, condition, cond_term, cond_fact;
non terminal var_decl_list, decl_list, decl_part, rep_var;
non terminal method_decl_list, statement_list, matched, unmatched;
non terminal option_in_class, more_formal_pars; 
non terminal stat_par, eventual_num, multiple_comma_expr;
non terminal comma_expr, and_cf, multiple_or_ct, multiple_and_cf;
non terminal designator_part, designator_list, inner_class_end;
non terminal start_main_program, var, assignment, statement_in_braces, cond_parens, class_method_list;
non terminal function_call, eventual_act_pars;
non terminal Obj prog_name, type_or_void, inner_class_name, designator, rep_var_part;
non terminal Struct type, expr, var_type, rhs, factor, term, multiple_mulop_factor, multiple_addop_term;
non terminal String method_name, relop, addop, mulop;


program ::= CLASS prog_name:o decl_list start_main_program method_decl_list RBRACE
			{:
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Code.dataSize = Tab.currentScope.getnVars();
				Tab.closeScope();
			:};
			

prog_name ::= IDENT: id
			{:
				RESULT = Tab.insert(Obj.Prog, id, Tab.noType);
				Tab.openScope();
			:};

start_main_program ::= LBRACE
					{:
						parser.isGlobal = false;
					:};




decl_list ::= decl_list decl_part
			|
			/* epsilon */;
		
decl_part ::= const_decl
			| var_decl
			| class_decl
			| error SEMI:l
				{:
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				:};
			
const_decl ::= FINAL type:t IDENT:id ASSIGN rhs:r SEMI
			{:
				if(parser.isGlobal)
				{
					parser.constDeclaration++;
				}
				
				if(t.getKind() != r.getKind())
				{
					System.err.print("Semanricka greska na liniji " + idleft + ": Ocekuje se ");
					switch(t.getKind())
					{
					case 1: System.err.println("int prilikom inicijalizacije konstante "); break;
					case 2: System.err.println("char prilikom inicijalizacije konstante "); break;
					}
				}
				
				Obj ins = Tab.insert(Obj.Con, id, t);
				ins.setAdr(constNumVal);
			:};
			

type ::= IDENT:id
		{:
			Obj nObj = Tab.find(id);
			if(nObj.getKind() == Obj.Type)
			{
				RESULT = nObj.getType();
			}
			else
			{
				parser.report_error("Greska na liniji " + idleft + " (" + id + ") nije tip", null);
				RESULT = Tab.noType;
			}
		:};


var_type ::= IDENT:id
	{:
		parser.variableType = id.toString();
		if(parser.isGlobal)
		{
			if(id.equals("int") || id.equals("char"))
			{
				parser.isPrimitive = true;	
			}
		}
		
		Obj nObj = Tab.find(id);
		if(nObj.getKind() == Obj.Type)
		{
			RESULT = nObj.getType();
		}
		else
		{
			parser.report_error("Greska na liniji " + idleft + " (" + id + ") nije tip", null);
			RESULT = Tab.noType;
		}
	:};

rhs ::=  NUMBER:n
	{:
		RESULT = Tab.intType;
		constNumVal = n;
	:}
	| CHARCONST:c
	{:
		RESULT = Tab.charType;
		constNumVal = c;
	:};
	
	
var ::= var_decl
		| error SEMI:l
		{:
			System.out.println("Izvrsen oporavak do ; na liniji " + lleft);
		:};
	
				
var_decl ::= var_type:t {: var_type = t; :} rep_var SEMI
			{:
			:};
			
rep_var ::= rep_var COMMA rep_var_part
			| rep_var_part;
			
rep_var_part ::= IDENT:id
				{:
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.varDeclaration++;
					}
					
					if(parser.currentClass == null)
					{
								
						RESULT = Tab.insert(Obj.Var, id, var_type);
					}
					else
					{
						RESULT = Tab.insert(Obj.Fld, id, var_type);
					}
					
					
				:}
				|IDENT:id LSQUARE RSQUARE
				{:
					if(parser.isGlobal && parser.isPrimitive)
					{
						parser.arrayDeclaration++;
					}
					
					if(parser.currentClass == null)
					{
						RESULT = Tab.insert(Obj.Var, id, new Struct(Struct.Array, var_type));
					}
					else
					{
						RESULT = Tab.insert(Obj.Fld, id, new Struct(Struct.Array, var_type));
					}
				:};
				
			


class_decl ::= CLASS inner_class_name:icn LBRACE var_decl_list option_in_class inner_class_end
				{:
					//icn.type.fields = Tab.topScopeLocalsToLinkedList();
					icn.getType().setMembers(Tab.currentScope.getLocals());
					Tab.closeScope();
					parser.currentClass = null;
				:}
			| error RBRACE:l
				{:
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				:};
					
				
inner_class_name ::= IDENT:id
				{:
					parser.innerClassDeclarations++;
					parser.isInInnerClass = true;
					parser.isGlobal = false;
					
					Struct thisClass = new Struct(Struct.Class);
					parser.currentClass = thisClass;
					RESULT = Tab.insert(Obj.Type, id.toString(), thisClass);
					Tab.openScope();
				:};
				
inner_class_end ::= RBRACE
				{:
					parser.isInInnerClass = false;
					parser.isGlobal = true;
				:};

var_decl_list ::= var_decl_list var
				| /* epsilon */;

method_decl_list ::= method_decl_list method_decl
					| /* epsilon */;

option_in_class ::= LBRACE class_method_list RBRACE
				| /* epsilon */;
				
class_method_list ::= class_method_list method_decl
					| method_decl;
					

type_or_void ::= type:t method_name:mn
				{:
					
					Obj o = Tab.insert(Obj.Meth, mn, t);
					RESULT = o;
					Tab.openScope();
					if(parser.currentClass != null)
					{
						//Tab.insert(Obj.Var, "this", parser.currentClass);
						//Tab.insert(Obj.Var, "this", Tab.intType);
					}
					isVoid = false;
					parser.returnType = t;
					
					if(parser.isInMain)
					{
						Code.mainPc = Code.pc;
						//if(o.getType() != Tab.noType)
						//{
							System.err.println("Semanticka greska na liniji " + tleft + ": main metoda mora biti void");
						//}
					
						o.setLevel(0);  
                   	    o.setAdr(Code.pc);
                    	Code.put(Code.enter);
                   	    Code.put(o.getLevel());
                    	Code.put(Tab.currentScope.getnVars());
					}
				:}
				| VOID method_name:mn
				{:
					
					Obj o = Tab.insert(Obj.Meth, mn, Tab.noType);
					RESULT = o;
					isVoid = true;
					Tab.openScope();
					if(parser.currentClass != null)
					{
						//Tab.insert(Obj.Var, "this", parser.currentClass);
						//Tab.insert(Obj.Var, "this", Tab.intType);
					}
					
					if(parser.isInMain)
					{
						Code.mainPc = Code.pc;
						//if(o.getType() != Tab.noType)
						//{
						//	System.err.println("Semanticka greska na liniji " + oleft + ": main metoda mora biti void");
						//}
					
						o.setLevel(0);  
                   	    o.setAdr(Code.pc);
                    	Code.put(Code.enter);
                   	    Code.put(o.getLevel());
                    	Code.put(Tab.currentScope.getnVars());
					}
				:};				
				
					
form_pars ::= form_pars COMMA more_formal_pars
			| more_formal_pars
			{:
				
			:};
			
more_formal_pars ::= type:t IDENT:id
				{:
					Obj o = Tab.insert(Obj.Var, id, t);
					o.setFpPos(argCnt++);
					o.setLevel(1);
					numOfFormalPars++;
					//System.err.println("INKREMENTIRANJE FORMAL "+ numOfFormalPars + " |||||||||" + argCnt );
					 
				:}
				| type:t IDENT:id LSQUARE RSQUARE
				{:
					Obj o = Tab.insert(Obj.Var, id, t);
					o.setFpPos(argCnt++);
					o.setLevel(1);
					numOfFormalPars++;
					//System.err.println("INKREMENTIRANJE FORMAL "+ numOfFormalPars + " |||||||||" + argCnt );
				:};
					

method_name ::= IDENT:name
			{:
				RESULT = name;
				if(name.equals("main"))
				{
					parser.isInMain = true;
					
					
					
				}
			:};
			

				
method_decl ::= type_or_void:o LPAREN form_pars RPAREN var_decl_list LBRACE statement_list RBRACE
			{:
				if(parser.isInInnerClass)
				{
					parser.innerClassMethods++;
				}
				else
				{
					parser.mainClassMethods++;
				}
				
				
				//o.level = 0;
				o.setLevel(numOfFormalPars);
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Tab.closeScope();
				
				if(parser.isInMain) parser.isInMain = false;
				argCnt = 0;
				
				if(!isVoid && !returnFound)
				{
					System.err.println("Semanticka greska na liniji " + oleft + ": Nije pronadjen return na kraju metode koja nije deklarisana kao void");
				}
				
				returnFound = false;
				numOfFormalPars = 0;
				
				if(isVoid)
				{
					Code.put(Code.exit);
					Code.put(Code.return_);
				}
				else
				{
					Code.put(Code.trap);
					Code.put(1);
				}
				
			:}
			| type_or_void:o LPAREN RPAREN var_decl_list LBRACE statement_list RBRACE
			{:
				if(parser.isInInnerClass)
				{
					parser.innerClassMethods++;
				}
				else
				{
					parser.mainClassMethods++;
				}
				
				//o.level = 0;
				o.setLevel(0);
				//o.locals = Tab.topScope.locals;
				o.setLocals(Tab.currentScope.getLocals());
				Tab.closeScope();
				
				if(parser.isInMain) parser.isInMain = false;
				argCnt = 0;
				
				if(!isVoid && !returnFound)
				{
					System.err.println("Semanticka greska na liniji " + oleft + ": Nije pronadjen return na kraju metode koja nije deklarisana kao void");
				}
				
				returnFound = false;
				
				if(isVoid)
				{
					Code.put(Code.exit);
					Code.put(Code.return_);
				}
				else
				{
					Code.put(Code.trap);
					Code.put(1);
				}
				
			:};  

statement_list ::= statement_list statement
				| /* eps */;
				


			

	

assignment ::= designator:d ASSIGN expr:e SEMI
				{:
					if(parser.isInMain) parser.numOfStatements++;
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}  
					
					if(!e.assignableTo(d.getType()))
					{
						if((d.getType().getKind() == Struct.Array) && (!e.assignableTo(d.getType().getElemType())))
						{
							System.err.println("Semanticka greska na liniji " + dleft + ": tipovi nisu kompatibilni ");
						}
					}
					else
					{
						Code.store(d);
					}
				:}					
				| error SEMI:l
				{:
					parser.report_error("Izvrsen oporavak do ; na liniji " + lleft, null);
				:};
					
					
function_call ::= designator:d {: numOfActualPars = 0; parametersFound = false; :} LPAREN eventual_act_pars RPAREN
				{:
					if(parser.isInMain) parser.numOfFunctions++;
					
					if(d.getKind() != Obj.Meth)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije metoda");
					}
					
					if(d.getLevel() != numOfActualPars)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": ocekuje se " + d.getLevel() + " parametara u metodi " + d.getName() + " a dobijeno je " + numOfActualPars);					
					}
					else
					{
						if(numOfActualPars != 0)
						{
							Collection<Obj> locs = d.getLocalSymbols();
							for(Obj i : locs)
							{
								if(i.getLevel() == 1)
								{
									int position = i.getFpPos();
									//if(i.getType().getKind() != parser.actualPars.get(position).getKind())
									if(!(parser.actualPars.get(position).assignableTo(i.getType())))
									{
										System.err.println("Semanticka greska na liniji " + dleft + ": Formalni i stvarni argumenti na poziciji " + position + " nisu komatibilnih tipova ");
									}
								}
							
							}
						}
					}
					
					if(parametersFound)
					{
						int dest_adr=d.getAdr()-Code.pc; // racunanje relativne adrese 
                        Code.put(Code.call); 
                        Code.put2(dest_adr);
                        if (d.getType() != Tab.noType)
						{                       
                           Code.put(Code.pop);
                        }
					}
					else
					{
						int destAdr = d.getAdr() - Code.pc;
						Code.put(Code.call);
						Code.put2(destAdr);
						if(d.getType() != Tab.noType)
						{
							Code.put(Code.pop);
						}
					}
									
					parser.actualPars.clear();
					parser.actualPars.add(null);
					numOfActualPars = 0;
				:}
				| designator:d error RPAREN:l	
				{:
					parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
					if(d.getKind() != Obj.Meth)
					{	
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije metoda");
					}
				:};
									
stat_par ::=function_call
			| designator:d PLUSPLUS
				{:
					if(parser.isInMain) parser.numOfStatements++;
					
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}
					
					if(d.getType().getKind() != Struct.Int)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije tipa int. Uz operator \"++\" se mora koristiti int");
					}
				:}
			| designator:d MINUSMINUS
				{:
					if(parser.isInMain) parser.numOfStatements++;
					
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}
					
					if(d.getType().getKind() != Struct.Int)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije tipa int. Uz operator \"--\" se mora koristiti int");
					}
				:};  
						
				
statement ::= matched
			| unmatched;
			
unmatched ::= IF cond_parens statement
			| IF cond_parens matched ELSE unmatched;
												
matched ::= assignment
			| stat_par SEMI
			| IF cond_parens matched ELSE matched
			    {:
					if(parser.isInMain) parser.numOfStatements++;
				:}
			| WHILE {:parser.isInWhile = true; :} cond_parens matched
				{:
					if(parser.isInMain) parser.numOfStatements++;
					parser.isInWhile = false;
				:}
			| BREAK SEMI:s
				{:
					if(parser.isInMain) parser.numOfStatements++;
					
					if(!parser.isInWhile)
					{
						System.err.println("Semanticka greska na liniji " + sleft + ": " + " break se koristi van while petlje");
					}
					
					
				:}
			| RETURN expr:e SEMI
				{:
					if(parser.isInMain) parser.numOfStatements++;
					returnFound = true;
					
					if(parser.returnType != null && e.getKind() != parser.returnType.getKind())
					{
						System.err.println("Semanticka greska na liniji " + eleft + ": " + " povratni tip metode ne odgovara deklarisanom povratnom tipu");
					}
					
					if(isVoid)
					{
						System.err.println("Semanticka greska na liniji " + eleft + ": " + " Vracena vrednost u metodi deklarisanoj kao void");
					}
					
					Code.put(Code.exit);
					Code.put(Code.return_);
				:}
			| RETURN SEMI
			{:
				if(parser.isInMain) parser.numOfStatements++;
				returnFound = true;
					
				Code.put(Code.exit);
				Code.put(Code.return_);
			:}
			| READ LPAREN designator:d RPAREN SEMI
				{:
					if(parser.isInMain) parser.numOfFunctions++;
					
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije promenljiva, element ili polje");
					}
					
					if((d.getType().getKind() != Struct.Int) && (d.getType().getKind() != Struct.Char))
					{
						System.err.println("Semanticka greska na liniji " + dleft + ": " + d.getName() + " nije tipa int ili char. U funkciji  \"read\" dozvoljeno je koristiti samo int ili char");
					}
				:}
			| PRINT LPAREN expr:e eventual_num RPAREN SEMI
				{:
					if(parser.isInMain) parser.numOfFunctions++;
					if(e.getKind() != Struct.Int && e.getKind() != Struct.Char)
					{
						System.err.println("Semanticka greska na liniji " + eleft + ": Izraz nije tipa int ili char. U funkciji  \"print\" dozvoljeno je koristiti samo int ili char");
					}
					
					if(e == Tab.intType)
					{
						Code.loadConst(5);
						Code.put(Code.print);
					}
					else
					{
						Code.loadConst(1);
						Code.put(Code.bprint);
					}
				:}
			| statement_in_braces;
				
statement_in_braces ::= LBRACE statement_list RBRACE
				{:
					if(parser.isInMain) parser.numOfStatements++;
				:}
				| error RBRACE:l
				{:
					parser.report_error("Izvrsen oporavak do } na liniji " + lleft, null);
				:};
			
eventual_num ::= COMMA NUMBER
				| /* epsilon */;
				
act_pars ::= expr:e
			{:
				numOfActualPars++;
				parser.actualPars.set(0, e);
				parametersFound = true;
			:}
			| expr:e multiple_comma_expr
			{:
				numOfActualPars++;
				parser.actualPars.set(0, e);
				//System.err.println("DODAJE SE " + e.getKind());
				parametersFound = true;
			:};  
			
eventual_act_pars ::= act_pars
					| /* epsilon */;  

comma_expr ::= COMMA expr:e
			{:
				numOfActualPars++;
				parser.actualPars.add(e);
				//System.err.println("DODAJE SE " + e.getKind());
			:};

multiple_comma_expr ::= multiple_comma_expr comma_expr
					| comma_expr; 
					
		
multiple_or_ct ::= multiple_or_ct OR cond_term
				| /* epsilon */;
				
cond_parens ::= LPAREN condition RPAREN
			| error RPAREN:l
			{:
				parser.report_error("Izvrsen oporavak do ) na liniji " + lleft, null);
			:};

condition ::= cond_term multiple_or_ct;

and_cf ::= AND cond_fact;

multiple_and_cf ::= multiple_and_cf and_cf
				| /* epsilon */;
				
cond_term ::= cond_fact multiple_and_cf;

cond_fact ::= expr:e1 relop:ro expr:e2
			{:
				if(!(e1.compatibleWith(e2)))
				{
					System.err.println("Semanticka greska na liniji " + e1left + ": Izrazi u uslovu nisu kompatibilni");
				}
				else
				{
					if(e1.getKind() == Struct.Array || e1.getKind() == Struct.Class)
					{
						
						if((!ro.equals("==")) && (!ro.equals("!=")))
						{
							System.err.println("Semanticka greska na liniji " + e1left + ": Izrazi su tipa niza ili klase a relacioni operator nije == ili !=");
						}
					}
				}
				
			:};

				
multiple_addop_term ::= multiple_addop_term:t0 addop:ao term:t2
					{:
						if(t0.getKind() == t2.getKind())
						{
							RESULT = t0;
						}
						else
						{
							RESULT = Tab.noType;
						}
						
						if(ao.equals("+"))
						{
							Code.put(Code.add);
						} else
						{
							Code.put(Code.add);
						}
					:}
					| addop:ao term:t1
					{:
						RESULT = t1;
						currentAddop = ao;
					:};

expr ::= term:t
		{:
			RESULT = t;
		:}
		| MINUS term:t1
		{:
			if(t1.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + t1left +  " nije tipa int");
			}
		:} 
		| MINUS term:t0 multiple_addop_term:t1
		{:
			if(t0.getKind() == t1.getKind())
			{
				RESULT = t0;
			}
			else
			{
				RESULT = Tab.noType;
			}
		:}
		| term:t0 multiple_addop_term:t1
		{:
			if(t0.getKind() == t1.getKind())
			{
				RESULT = t0;
			}
			else
			{
				RESULT = Tab.noType;
			}
			
			if(t0.getKind() != Struct.Int || t1.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + t1left +  " Elementi izraza(sabiranje) nisu tipa int");
			}
			
			if(currentAddop.equals("+"))
			{
				Code.put(Code.add);
			}
			else if(currentAddop.equals("-"))
			{
				Code.put(Code.sub);
			}
			
		:};


multiple_mulop_factor ::= multiple_mulop_factor:mf mulop:mo factor:f
						{:
							if(mf.getKind() != Struct.Int || f.getKind() != Struct.Int)
							{
								RESULT = Tab.noType;
							}
							else
							{
								RESULT = f;
							}
							
							if(mo.equals("*"))
							{	
								Code.put(Code.mul);
							}
								else if(mo.equals("/"))
							{
								Code.put(Code.div);
							}else
							{
								Code.put(Code.rem);
							}
						:}
						| mulop:mo factor:f
						{:
							currentMulop = mo;
							RESULT = f;
						:};
						
term ::= factor:f
		{:
			RESULT = f;
		:} 
		| factor:f multiple_mulop_factor:mf
		{:
			if(mf.getKind() != Struct.Int || f.getKind() != Struct.Int)
			{
				RESULT = Tab.noType;
			}
			else
			{
				RESULT = f;
			}
			
			if(f.getKind() != Struct.Int || mf.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + mfleft +  " Elementi izraza(mnozenje) nisu tipa int");
			}
			
			//Code.load(f);
			if(currentMulop.equals("*"))
			{	
				Code.put(Code.mul);
			}
			else if(currentMulop.equals("/"))
			{
				Code.put(Code.div);
			}else
			{
				Code.put(Code.rem);
			}
		:};
		

factor ::= designator:d
		{:
			RESULT = d.getType();
			Code.load(d);
		:} 
		| designator:d1 LPAREN act_pars RPAREN
		{:
			RESULT = d1.getType();
			if(d1.getKind() != Obj.Meth)
			{
				System.err.println("Semanticka greska na liniji " + d1left +  d1.getName() + " nije metoda");
			}
		:}
		| designator:d1 LPAREN RPAREN
		{:
			RESULT = d1.getType();
			if(d1.getKind() != Obj.Meth)
			{
				System.err.println("Semanticka greska na liniji " + d1left +  d1.getName() + " nije metoda");
			}
			
			int destAdr=d1.getAdr()-Code.pc; 
            Code.put(Code.call);
            Code.put2(destAdr);
		:}
		| NUMBER:i
		{:
			Obj o = new Obj(Obj.Con, "", Tab.intType);
			o.setAdr(i.intValue());
			Code.load(o);
			//System.err.println("Ucitan " + i.intValue());
			RESULT = Tab.intType;
		:}
		| CHARCONST:c
		{:
			Obj o = new Obj(Obj.Con, "", Tab.charType);
			o.setAdr(c.charValue());
			Code.load(o);
			RESULT = Tab.charType;
		:}
		| NEW type:t
		{:
			// niz
			RESULT = t;
			
		:}
		| NEW type:t LSQUARE expr:e RSQUARE
		{:
			RESULT = t;
			if(e.getKind() != Struct.Int)
			{
				System.err.println("Semanticka greska na liniji " + tleft +  " izraz u [] nije tipa int");
			}
		:}
		| NEW type:t LPAREN act_pars RPAREN
		{:
			RESULT = t;
			
			if(t.getKind() != Struct.Class)
			{	
				System.err.println("Semanticka greska na liniji " + tleft + " Nakon new mora doci ime klase");
			}
		:}
		| NEW type:t LPAREN RPAREN
		{:
			RESULT = t;
			
			if(t.getKind() != Struct.Class)
			{	
				System.err.println("Semanticka greska na liniji " + tleft + " Nakon new mora doci ime klase");
			}
		:}
		| LPAREN expr:e RPAREN
		{:
			RESULT = e;
		:};
		
			
designator_part ::= DOT IDENT
				| LSQUARE expr RSQUARE;
				
designator_list ::= designator_list designator_part
				| /* epsilon */;
						
designator ::= IDENT:id
			{:
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					System.out.println("Pretraga " + idleft + " (" + id + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
				
				RESULT = ob;
			:}
			| IDENT:id DOT IDENT:id2 designator_list
			{:
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					if(ob.getType().getKind() != Struct.Class)
					{
						parser.report_error("Greska na liniji " + idleft + " ocekivana klasa",null);
					}
					System.out.println("Pretraga " + idleft + " (" + id.toString() + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
				
				if(ob.getType().getKind() != Struct.Class)
				{
					System.err.println("Semanticka greska na liniji " + idleft + id +  " nije klasa");
				}
				else
				{
					SymbolDataStructure sdt = ob.getType().getMembers();
					Obj res = sdt.searchKey(id2);
					if(res == null)
					{
						RESULT = ob;
						System.err.println("Semanticka greska na liniji " + idleft + id2 +  " nije polje ove klase");
					}
					else
					{
						RESULT = res;
					}
				}
				
				
				
			:}
			| IDENT:id LSQUARE expr:e RSQUARE designator_list
			{:
				Obj ob = Tab.find(id); 
				if(ob != Tab.noObj)
				{
					if(ob.getType().getKind() != Struct.Array)
					{
						parser.report_error("Greska na liniji " + idleft + " ocekivan niz",null);
					}
					System.out.println("Pretraga " + idleft + " (" + id.toString() + "), nadjeno " + ob.getName());	
				}
				else
				{
					System.out.println("Nije pronadjen simbol sa linije " + idleft);
				}
				
				if(ob.getType().getKind() != Struct.Array)
				{
					System.err.println("Semanticka greska na liniji " + idleft + ": " +  id +  " nije niz");
				}
				
				if(e.getKind() != Struct.Int)
				{
					System.err.println("Semanticka greska na liniji " + idleft + ": Izraz u srednjima zagradama nije tipa int");
				}
				
				RESULT = ob;
			:};
			


relop ::= EQUAL:id
		{:
			RESULT = "==";
		:}
		| NOTEQUAL
		{:
			RESULT = "!=";
		:}
		| GREATER
		{:
			RESULT = ">";
		:}
		| GREATEREQUAL
		{:
			RESULT = ">=";
		:}
		| LESS
		{:
			RESULT = "<";
		:}
		| LESSEQUAL
		{:
			RESULT = "<=";
		:};
		
addop ::= PLUS
		{:
			RESULT = "+";
		:}
		| MINUS
		{:
			RESULT = "-";
		:};
		
mulop ::= TIMES
		{:
			RESULT = "*";
		:}
		| DIVIDE
		{:
			RESULT = "/";
		:}
		| MOD
		{:
			RESULT = "%";
		:};

















